defaultStorageMapping: null
installedPackages: {}
jobs:
  Job-10:
    excludeSelector: ""
    id: 10
    includeSelector: "+{ location: DATA name: DIM_* } OR { location: STAGE name: STG_MEASURES_CURRENT }"
    name: Process Dims
    steps: []
    subgraphs: []
  Job-11:
    excludeSelector: ""
    id: 11
    includeSelector: "{ name: STG_ML_* } OR { name: ML_* }"
    name: Process ML
    steps: []
    subgraphs: []
  Job-8:
    excludeSelector: "{ name: STG_ML_*} OR { name: ML_* }"
    id: 8
    includeSelector: "+{ name: DIM_* } OR +{ name: FCT_* } OR {name: SQL_*} OR {name: STG_*} "
    name: Process Dims and Facts
    steps:
      - "642"
    subgraphs:
      - 41
locations: {}
macros:
  Macro-1:
    id: "1"
    macroString: |-
      {%- macro row_number(order_by, partition_by=[], order='') -%}
          ROW_NUMBER() OVER (
              {%- for p_col in partition_by %}
                  {%- if loop.first %} PARTITION BY {% endif %}
                      {{- p_col -}}
                  {%- if not loop.last %}, {% endif -%}
              {%- endfor -%}

              {%- for o_col in order_by -%}
                  {%- if loop.first %} ORDER BY {% endif -%}
                      {{- o_col -}}
                  {%- if not loop.last %}, {% endif -%}
              {%- endfor -%}

              {% if order != '' %} {{order}}{%- endif %} )
      {%- endmacro -%}



      {%- macro hash(columns, algo='MD5', delimiter='||', length=32) -%}
          {%  for column in columns %}
              {%- if loop.first %}CAST( {{ algo }}({% endif -%}
                  NVL(CAST({{ column }} AS VARCHAR), 'null')
              {%- if not loop.last %} || {% if delimiter != '' %} '{{ delimiter }}' || {% endif -%} {% endif -%}
              {%- if loop.last %}) AS CHAR({{ length }}) ){% endif -%}
          {%  endfor %}
      {%- endmacro -%}


      {%- macro even_odd(column) -%}
          CASE WHEN MOD({{ column }}, 2) = 0 THEN 'EVEN' ELSE 'ODD' END
      {%- endmacro %}
packages: {}
projects: {}
stepTypes:
  StepType-1:
    id: "1"
    isDisabled: false
    metadata:
      defaultStorageLocation: DATASTORE
      error: null
      nodeMetadataSpec: |
        capitalized: Data Store
        short: DS
        plural: Data Stores
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          
          - type: businessKeyColumns
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: SYSTEM_CREATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2+

                {{ stage('Create Data Store Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

            {% for test in node.tests if config.testsEnabled %}
                {% if test.runOrder == 'Before' %}
                    {{ test_stage(test.name, test.continueOnFailure) }}
                    {{ test.templateString }}
                {% endif %}
            {% endfor %}

            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}
            {% endif %}

            {% if has_business_key and is_type_2 %}

                {% for source in sources %}
                    {{ stage('MERGE ' + source.name | string) }}
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                    /* New Rows That Don't Exist */
                    SELECT
                    {% for col in source.columns if not col.isSurrogateKey %}
                        {% if col.isSystemVersion %}
                            1
                        {% elif col.isSystemCurrentFlag %}
                            'Y'
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}",
                    {% endfor %}
                        'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                    {{ source.join }}
                    LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                    {% endfor %}
                    WHERE
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "DIM"."{{ col.name }}" IS NULL
                    {% endfor %}
                    UNION ALL
                    /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                    SELECT
                    {% for col in source.columns if not col.isSurrogateKey %}
                        {% if col.isSystemVersion %}
                            "DIM"."{{ col.name }}" + 1
                        {% elif col.isSystemCurrentFlag %}
                            'Y'
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}",
                    {% endfor %}
                        'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                    {{ source.join }}
                    INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                    {% endfor %}
                    WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                    {% for col in source.columns if (col.isChangeTracking == true) %}
                        {% if loop.first %}
                            AND (
                        {% else %}
                            OR
                        {% endif %}
                        ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                        {% if loop.last %}
                            )
                        {% endif %}
                    {% endfor %}
                    UNION ALL
                    /* Rows Needing To Be Expired Due To Type-2 Column Changes
                    In this case, only two columns are merged (version and end date) */
                    SELECT
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        {% if col.isSystemEndDate %}
                            DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                        {% elif col.isSystemCurrentFlag %}
                            'N'
                        {% else %}
                            "DIM"."{{ col.name }}"
                        {% endif %}
                        AS "{{ col.name }}",
                    {% endfor -%}
                        'update_expired_version_rows' AS "DML_OPERATION"
                    {{ source.join }}
                    INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                    {% endfor %}
                    WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                    {% for col in source.columns if (col.isChangeTracking == true) %}
                        {% if loop.first %}
                            AND (
                        {% else %}
                            OR
                        {% endif %}
                        ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                        {% if loop.last %}
                            )
                        {% endif %}
                    {% endfor %}
                    UNION ALL
                    /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                    This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                    SELECT
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                            "DIM"."{{ col.name }}"
                        {% elif col.isSystemCurrentFlag %}
                            'Y'
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}",
                    {% endfor -%}
                        'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                    {{ source.join }}
                    INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                    {% endfor %}
                    WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                    AND (
                    {% for col in source.columns if (col.isChangeTracking) -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                    {% endfor %} )
                    {% for col in source.columns if not (   col.isBusinessKey or
                                                            col.isChangeTracking or
                                                            col.isSurrogateKey or
                                                            col.isSystemVersion or
                                                            col.isSystemCurrentFlag or
                                                            col.isSystemStartDate or
                                                            col.isSystemEndDate or
                                                            col.isSystemUpdateDate or
                                                            col.isSystemCreateDate) -%}
                        {% if loop.first %}
                            AND (
                        {% endif %}
                        {% if not loop.first %}
                            OR
                        {% endif %}
                        NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                        {% if loop.last %}
                            )
                        {% endif %}
                    {% endfor %}
                ) AS "SRC"
                ON
                {% for col in source.columns if col.isBusinessKey -%}
                    {% if not loop.first %}
                        AND
                    {% endif %}
                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                {% endfor %}
                AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                WHEN MATCHED THEN UPDATE SET
                {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% if not loop.last %}, {% endif %}
                {% endfor -%}
                WHEN NOT MATCHED THEN INSERT (
                {%- for col in source.columns if not col.isSurrogateKey %}
                    "{{ col.name }}"
                    {% if not loop.last %}, {% endif %}
                {% endfor -%}
                )
                VALUES (
                {%- for col in source.columns if not col.isSurrogateKey %}
                    "SRC"."{{ col.name }}"
                    {% if not loop.last %}, {% endif %}
                {% endfor -%}
                )

            {% endfor %}

            {% elif has_business_key and not is_type_2 %}
                {% for source in sources %}
                    {{ stage('MERGE ' + source.name | string ) }}
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last %}, {% endif %}
                        {% endfor %}
                        {{ source.join }})
                        AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                    {% endfor %}
                    WHEN MATCHED
                    {% for col in source.columns if not (   col.isBusinessKey or
                                                            col.isSurrogateKey or
                                                            col.isSystemVersion or
                                                            col.isSystemCurrentFlag or
                                                            col.isSystemStartDate or
                                                            col.isSystemEndDate or
                                                            col.isSystemUpdateDate or
                                                            col.isSystemCreateDate) %}
                        {% if loop.first %}
                            AND (
                        {% else %}
                            OR
                        {% endif %}
                        NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                        {% if loop.last %}
                            )
                        {% endif %}
                    {% endfor %}
                    THEN UPDATE SET
                    {%- for col in source.columns if not (  col.isBusinessKey or
                                                            col.isSurrogateKey or
                                                            col.isSystemVersion or
                                                            col.isSystemCurrentFlag or
                                                            col.isSystemStartDate or
                                                            col.isSystemEndDate or
                                                            col.isSystemCreateDate) %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor %}
                    WHEN NOT MATCHED THEN
                    INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                {% endfor %}
            {% else %}
                {% for source in sources %}
                    {{ stage('Insert ' + source.name | string ) }}
                    INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )

                    SELECT
                    {% for col in source.columns if not col.isSurrogateKey %}

                        {% if col.isSystemVersion %}
                            1
                        {% elif col.isSystemCurrentFlag %}
                            'Y'
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                        
                    {% endfor %}
                    {{ source.join }}
                {% endfor %}            
            {% endif %}

            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}
            {% endif %}
            	

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Data Store
    version: 1
  StepType-16:
    id: "16"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Work View
        short: VW
        tagColor: 'green'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: Work View
    version: 1
  StepType-17:
    id: "17"
    isDisabled: false
    metadata:
      defaultStorageLocation: VIEWS
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: VWA
        tagColor: 'red'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: User View
    version: 1
  StepType-19:
    id: "19"
    isDisabled: false
    metadata:
      defaultStorageLocation: DATA
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |+
            {{ stage('Create Dimension Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{% if col.isSurrogateKey %}
            			identity
            		{% endif %}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}



            {{ stage('Insert Zero Record') }}
            INSERT INTO {{ this }}
            (SELECT 
            {% for col in sources[0].columns %}
            	{% set dtparams = col.dataType.partition('(')[-1].rpartition(')')[0].split(',') %}
            	{% if col.isSurrogateKey %}0
            		{% elif col.isSystemCurrentFlag %}'Y'
            		{% elif col.isSystemStartDate or col.isSystemEndDate or col.isSystemUpdateDate or col.isSystemCreateDate %}{{ get_source_transform(col) }}
            		{% elif col.isSystemVersion%}1
            		{% elif col.dataType[:3] | upper in ('NUM','INT','DEC','FLO') %}0
            		{% elif col.dataType[:4] | upper in ('DATE','TIME') %}CAST('0001-01-01' AS {{ col.dataType }})
            		{% elif col.dataType[:3] | upper in ('VAR','CHA','STR','BIN') %}
            			{% if dtparams[0] and dtparams[0] | int < 7 %}
            				SUBSTRING('UNKNOWN',1,{{ dtparams[0] }})
            			{% else %}
            				'UNKNOWN'
            			{% endif %}
            		{% elif col.nullable %}NULL
            		{% else %}''
            	{% endif %}
            	AS "{{ col.name }}"
            	{% if not loop.last %}, {% endif %}
            {% endfor %}
            )

        run:
          templateString: |
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}


            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension0
    version: 1
  StepType-20:
    id: "20"
    isDisabled: false
    metadata:
      defaultStorageLocation: DATA
      error: null
      nodeMetadataSpec: |
        capitalized: Forecast
        short: FORECAST
        plural: Persistent Stages
        tagColor: 'blue'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Forecast
    version: 1
  StepType-22:
    id: "22"
    isDisabled: false
    metadata:
      defaultStorageLocation: DATA
      error: null
      nodeMetadataSpec: |
        capitalized: Reference
        short: REF
        plural: Stages
        tagColor: 'yellow'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |+
            {{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}

        run:
          templateString: ""
    name: Reference Data
    version: 1
  StepType-23:
    id: "23"
    isDisabled: false
    metadata:
      defaultStorageLocation: DATA
      error: null
      nodeMetadataSpec: |+
        capitalized: Copy of Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

      templates:
        create:
          templateString: |
            {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
                {% if test.runOrder == 'Before' %}
                    {{ test_stage(test.name, test.continueOnFailure) }}
                    {{ test.templateString }}
                {% endif %}
            {% endfor %}


            {% for test in node.tests if config.testsEnabled %}
                {% if test.runOrder == 'After' %}
                    {{ test_stage(test.name, test.continueOnFailure) }}
                    {{ test.templateString }}
                {% endif %}
            {% endfor %}

            {% for column in columns %}
                {% for test in column.tests %}
                    {{ test_stage(column.name + ": " + test.name) }}
                    {{ test.templateString }}
                {% endfor %}
            {% endfor %}
    name: Manual Table
    version: 1
  StepType-24:
    id: "24"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stream
        short: STR
        tagColor: "yellow"
        plural: Streams

        deployStrategy: advanced

        config:

        - groupName: Stream
          items:

          - displayName: Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Append Only
            attributeName: appendOnly
            type: toggleButton
            default: false
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: view
            options:
            - view
            isRequired: true

        systemColumns:
        - displayName: "METADATA$ACTION"
          transform: "METADATA$ACTION"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataAction
          description: Indicates the DML operation (INSERT, DELETE) recorded.
        - displayName: "METADATA$ISUPDATE"
          transform: "METADATA$ISUPDATE"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataIsUpdate
          description: Indicates whether the operation was part of an UPDATE statement.
        - displayName: "METADATA$ROW_ID"
          transform: "METADATA$ROW_ID"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataRowId
          description: Specifies the unique and immutable ID for the row, which can be used to track changes to specific rows over time.
      templates:
        create:
          templateString: |-
            {% if desiredState == undefined %}

                {{ stage('Drop Stream') }}
                DROP STREAM IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name + "_STR")  }}

            {% else %}

                {{ stage('Create Stream') }}
                CREATE STREAM IF NOT EXISTS {{ ref_no_link(desiredState.node.location.name, desiredState.node.name + "_STR")  }}
                ON TABLE {{ ref(desiredState.sources[0].dependencies[0].node.location.name, desiredState.sources[0].dependencies[0].node.name) }}
                APPEND_ONLY = {% if desiredState.config.appendOnly is true %} TRUE {%- else -%} FALSE {% endif %} 
                SHOW_INITIAL_ROWS = {% if desiredState.config.initialRows is true %} TRUE {%- else -%} FALSE {% endif %} 
                COMMENT = 'CDC Stream on {{ this }}'


            {% endif %}
        run:
          templateString: ""
    name: Stream
    version: 1
  StepType-25:
    id: "25"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: SQL
        short: SQL
        tagColor: gray
        plural: sql

        config: 
        - groupName: Options 
          items: 
          - type: materializationSelector
            options:
              - table
            default: table
            isRequired: true
            isEnabled: "false"

          - displayName: SQL
            attributeName: SQLstmt 
            type: textBox 
            syntax: sql 
            isRequired: true    
            default: "  CREATE OR REPLACE TABLE DB.SCHEMA.TEST AS \n
            SELECT 1 COL"
         
        systemColumns: 
        - displayName: SYSTEM_START_DATE 
          transform: CURRENT_TIMESTAMP
          dataType: TIMESTAMP 
          placement: beginning 
          attributeName: isSQL
         
        - displayName: SQL_STMT
          transform: ''
          dataType: VARCHAR 
          placement: end 
          attributeName: isSystemStartDate 
         
         
      templates:
        create:
          templateString: |-
            {{ stage('Create SQL Table') }}

            CREATE OR REPLACE TABLE {{ this }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }} 
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
        run:
          templateString: |-
            {% set sql = config.SQLstmt %}
            {% set sql_fix = sql | replace("'", "qq") %}

            {{ stage('Insert SQL') }} 
            INSERT INTO {{ this }} (SYSTEM_START_DATE, SQL_STMT) 
            SELECT CURRENT_TIMESTAMP, '{{ sql_fix }}'; 

            {{ stage('Run SQL') }}
            {{ sql }}
    name: SQL
    version: 1
  StepType-26:
    id: "26"
    isDisabled: false
    metadata:
      defaultStorageLocation: DATA
      error: null
      nodeMetadataSpec: |
        capitalized: Materialized View
        short: MV
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - materialized view
              default: materialized view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: overrideSQLToggle
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create Materialized View') }}
                {% set source = sources[0] %}

                CREATE OR REPLACE MATERIALIZED VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

            {% endif %}
        run:
          templateString: ""
    name: Materialized View
    version: 1
  StepType-27:
    id: "27"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: ML FORECAST
        short: FCST
        tagColor: 'yellow'
        plural: ML Forecasts

        config:
        - groupName: Entity Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true
            enableIf: "false"
            
          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            enableIf: "true"

        - groupName: Forecast Model Input
          items:
            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: false
            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: false
            - displayName: Days To Forecast
              attributeName: fcdays
              type: textBox
              isRequired: true
              default: '30'

        - groupName: Forecast Model Output
          items:
            - type: toggleButton
              displayName: 'Include Source Data'
              attributeName: 'addsourcedata'
              isRequired: false
              default: 'true'

        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}


            {{ stage('Create Forecast Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


        run:
          templateString: |+
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {{ stage('Create Forecast Model Instance') }}
            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {% for col in source.columns if not col.forecast and not col.lower_bound and not col.upper_bound %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}
                '),
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
            )
            	
            {% if config.truncateBefore %}
            	{{ stage('Truncate Stage Table') }}
            	TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            {% endif %}

            	
            {{ stage('Insert ' + source.name | string ) }}

            BEGIN
            	CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST({{ config.fcdays }});

            	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in source.columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{% if config.addsourcedata %}
            	SELECT
            	{% for col in source.columns %}
            		{{ get_source_transform(col) }} AS "{{ col.name }}"
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}

            	{{ source.join }}

            	UNION ALL
            	{% endif %}

            	SELECT
            	{% for col in source.columns %}
            		{% if col.id == config.tscol.id %}
            			"TS"
            		{% elif col.id == config.tgtcol.id %}
            			NULL
            		{% elif col.forecast or col.lower_bound or col.upper_bound %}
            			"{{ col.name }}"
            		{% else %}
            			{{ get_source_transform(col) }} AS "{{ col.name }}"
            		{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            	FROM TABLE(RESULT_SCAN(-1));
            END

    name: ML Forecast
    version: 1
  StepType-30:
    id: "30"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: ML FORECAST 2
        short: ML_FCSTS
        tagColor: 'red'
        plural: ML Forecasts

        config:

        - groupName: Forecast Model Input
          items:

            - type: toggleButton
              displayName: 'Multi-Series Forecast'
              attributeName: 'multiseries'
              isRequired: false
              default: 'true'

            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true

            - type: toggleButton
              displayName: 'Exogenous Variables'
              attributeName: 'exvar'
              isRequired: false
              default: 'true'
          
            - displayName: Days To Forecast
              attributeName: fcdays
              type: textBox
              enableIf: '{%- if not config.exvar %}true{%- else %}false{%- endif %}' 
              isRequired: false
              default: '30'

        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {{ stage('Create Forecast Table') }}


            CREATE OR REPLACE TABLE {{ this }}
            (
                {% for col in source.columns  %}
                    "{{ col.name }}" 
                    {%- if col.name == config.tscol.name %} TIMESTAMP 
                    {%- elif col.name == config.tgtcol.name %} FLOAT 
                    {%- else %} {{ col.dataType }}
                    {%- endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


        run:
          templateString: |+
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {{ stage('Truncate Forecast table') }}
            TRUNCATE IF EXISTS {{ this }}

            {{ stage('Populate Forecast Table') }}

            INSERT INTO {{ this }}
            (
                {%- for col in source.columns  %} 
                    "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
            )
            SELECT 
                {% for col in source.columns  %} 
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            {{ source.join }}

            {{ stage('Create Forecast Model Instance') }}

            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
            )


            {{ stage('Insert ' + source.name | string ) }}
            BEGIN

            {% if config.exvar %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NULL
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' );

                UPDATE {{ this }} SRC
                SET 
                    {%- for col in columns if  col.forecast or col.lower_bound or col.upper_bound %}
                        "{{ col.name }}" = RES."{{ col.name }}" {%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES
                WHERE 
                    RES."TS" = SRC."{{ config.tscol.name }}"
                    {%- if config.multiseries  %}
                    AND RES."SERIES" = SRC."{{ config.seriescol.name }}"            
                    {%- endif %};

            {% else %}

                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST({{ config.fcdays }});

                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
            	        {%- elif col.id == config.tscol.id %}"TS"
            	        {%- elif col.id == config.tgtcol.id %}NULL
            	        {%- elif col.forecast or col.lower_bound or col.upper_bound %}"{{ col.name }}"
            	        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
            	        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;
            {% endif %}


            END


    name: ML Forecast 2
    version: 1
  StepType-4:
    id: "4"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: Stage Date
        short: DATE
        plural: Dates
        tagColor: 'black'
        config:
        - groupName: Date Options
          items:
          - displayName: Starting Date
            attributeName: startingDate
            type: textBox
            syntax: sql
            default: 'DATEADD(DAY, -730, CURRENT_DATE)'
          - displayName: Number of Days to Generate
            attributeName: daysToGenerate
            type: textBox
            default: '2000'
          - displayName: Generated Date Column Name
            attributeName: dateColumnName
            type: textBox
            default: '"DATE_COL"'
        - groupName: Additional Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true
          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            isRequired: true
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
        systemColumns:
        - displayName: DATE_KEY
          transform: '{{ config.dateColumnName }}'
          dataType: 'DATE'
          placement: beginning
          attributeName: isDate
        - displayName: 'YEAR'
          transform: 'YEAR({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isYear
        - displayName: 'MONTH'
          transform: 'MONTH({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isMonth
        - displayName: 'MONTH_NAME'
          transform: 'MONTHNAME({{ config.dateColumnName }})'
          dataType: CHAR(3)
          placement: beginning
          attributeName: isMonthName
        - displayName: 'DAY_OF_MONTH'
          transform: 'DAY({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isDayOfMonth
        - displayName: 'DAY_OF_WEEK'
          transform: 'DAYOFWEEK({{ config.dateColumnName }})'
          dataType: VARCHAR(9)
          placement: beginning
          attributeName: isDayOfWeek
        - displayName: 'WEEK_OF_YEAR'
          transform: 'WEEKOFYEAR({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isWeekOfYear
        - displayName: 'DAY_OF_YEAR'
          transform: 'DAYOFYEAR({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isYearColumn
      templates:
        create:
          templateString: |-
            {{ stage('Create Stage Table') }}
                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}
            {% endif %}
            {% if config.truncateBefore %}
                {{ stage('Truncate Stage Table') }}
                TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            {% endif %}
            {{ stage('Insert ' + sources[0].name | string ) }}
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in sources[0].columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                WITH CTE_DATE_GENERATOR AS (
                    SELECT DATEADD(DAY, SEQ4(), {{config.startingDate }}) AS {{ config.dateColumnName }}
                    FROM TABLE(GENERATOR(ROWCOUNT=>{{ config.daysToGenerate }}))
                )
                SELECT
                {% for col in sources[0].columns %}
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                FROM CTE_DATE_GENERATOR
            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}
            {% endif %}
    name: Date Stage
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-50:
    id: "50"
    name: DIM_DATE
    steps:
      - 528d496d-b0e6-48b8-b605-dbacb930a607
      - 9da0baad-a0fb-4bd9-bce8-2e2c3268ae2b
      - 01869fa3-a55a-4b2d-80ff-e84e59e4e283
      - 9646524a-d0f5-41b7-8d52-4665dbb3c853
      - c13d0009-e85a-4a02-b34e-131bb850e537
      - 3e75e110-81b7-4de7-8fc1-d9eb3c7062bb
      - d231b8e6-8277-40ba-ba43-8b3ebe9d4ce1
      - 9f6e74ba-2cfd-4fdf-bce6-49d422051b5b
      - 2d9f453e-f432-4a19-a605-81709e23d574
      - 5133d533-3f69-4924-8378-6ab89a1bf92f
  Subgraph-56:
    id: "56"
    name: DIM EVENTS
    steps:
      - "609"
      - "610"
      - "611"
      - "613"
      - 1b456835-de85-4056-954c-f4c0c2ae0251
      - 1f420ab5-fb58-4bac-9a31-506876349c9c
      - 40946110-8612-4578-98c1-7f839666893a
      - 521f40dc-f587-4883-9552-076ab4ac821c
      - 5f9e1382-ded6-478f-87e6-27ac0d7b03f1
      - 6d172d1b-af1a-402d-bce5-6ecfdce2ddab
      - 7d8b84ba-e9c2-45ce-955a-3f51df08c001
      - 8ea642ef-4606-44d0-8121-571a15ba33fa
      - 9e00b80a-f776-4133-ae88-81b0b810e573
      - b4585615-226c-470e-8e85-be95816a6df2
      - b598b9b3-9334-4652-9464-6fbe8ec60392
      - dad91b29-a0e5-495a-b169-a3a7f78e66e2
      - dcecf750-3ca1-418e-a5b6-dca1e383dd74
      - e71b17ec-e0b8-4565-8dc1-2080df360a5e
      - f678e8cf-4171-42f1-89a2-f9e61af192a7
      - fa6e6df7-d312-46be-9a24-28c217b9a929
      - e29230b4-b3ae-4119-9155-e4b3663ead34
      - a09ef102-4ad5-4163-a713-31f957297b74
      - 34d4c87f-5ab6-45c2-a53a-c00885b6086c
  Subgraph-59:
    id: "59"
    name: DIM_PRICE_COST
    steps:
      - fa6e6df7-d312-46be-9a24-28c217b9a929
      - 7d8b84ba-e9c2-45ce-955a-3f51df08c001
      - 23da740e-50c5-4361-b916-251759082ddb
      - 98a79ee0-39e1-4d29-9b40-12a08dc9fd23
  Subgraph-60:
    id: "60"
    name: INVENTORY_WGT
    steps:
      - 14be523b-b355-49a6-ad14-da397ed80444
      - 1b456835-de85-4056-954c-f4c0c2ae0251
      - 40946110-8612-4578-98c1-7f839666893a
      - 521f40dc-f587-4883-9552-076ab4ac821c
      - 6214df34-3cd9-45e2-9ade-14ee5bb1f3d5
      - 6c152345-7089-4a3e-a1fb-f86646dfb4df
      - 8ea642ef-4606-44d0-8121-571a15ba33fa
      - 94c85ee9-190b-467a-9ef9-19358b1dd22c
      - 9e00b80a-f776-4133-ae88-81b0b810e573
      - b598b9b3-9334-4652-9464-6fbe8ec60392
      - dad91b29-a0e5-495a-b169-a3a7f78e66e2
      - f9d479c5-bb55-48fc-a88d-79f914230095
  Subgraph-62:
    id: "62"
    name: FCT_SALES
    steps:
      - "613"
      - 01869fa3-a55a-4b2d-80ff-e84e59e4e283
      - 0d9082ec-a0f0-4877-b260-231fa26ce355
      - 1b456835-de85-4056-954c-f4c0c2ae0251
      - 1f420ab5-fb58-4bac-9a31-506876349c9c
      - 23da740e-50c5-4361-b916-251759082ddb
      - 2d9f453e-f432-4a19-a605-81709e23d574
      - 3217c5fd-8bd5-4d9a-878b-1cd2e90eea42
      - 33548f58-a392-4c27-80ed-5783fef0a139
      - 35c303fb-2a87-4840-9fb1-9458f2aa6456
      - 3c49b8ad-a39f-4dc6-975c-0dd2c4ce0f25
      - 3e75e110-81b7-4de7-8fc1-d9eb3c7062bb
      - 40946110-8612-4578-98c1-7f839666893a
      - 4bcd4def-5762-46a6-9954-bf1ac94b7585
      - 5260a3f1-390d-4e1f-aff1-4da0c15db0da
      - 528d496d-b0e6-48b8-b605-dbacb930a607
      - 5353d003-2f97-4129-b597-88bcf8da70b5
      - 5b0036c6-f73b-49a8-b51f-46597c418ac8
      - 5f9e1382-ded6-478f-87e6-27ac0d7b03f1
      - 60485eef-5f0f-4e58-88de-e60de6bdd818
      - 7d8b84ba-e9c2-45ce-955a-3f51df08c001
      - 80217ffd-0123-46d0-831b-f27e6326b209
      - 8ea642ef-4606-44d0-8121-571a15ba33fa
      - 91a09933-eb11-428c-8b8c-5c543cce7053
      - 94c85ee9-190b-467a-9ef9-19358b1dd22c
      - 950b8666-650d-4f58-802d-375d20ae3fb7
      - 9646524a-d0f5-41b7-8d52-4665dbb3c853
      - 987e441b-71d8-4f60-bb5f-7565ab422f6c
      - 98a79ee0-39e1-4d29-9b40-12a08dc9fd23
      - 99510b9e-1d3e-4709-93b8-2042202093b0
      - 9da0baad-a0fb-4bd9-bce8-2e2c3268ae2b
      - 9f6e74ba-2cfd-4fdf-bce6-49d422051b5b
      - af5625d6-1d11-4927-b5cd-5c365d8b8a8c
      - b4585615-226c-470e-8e85-be95816a6df2
      - b598b9b3-9334-4652-9464-6fbe8ec60392
      - c13d0009-e85a-4a02-b34e-131bb850e537
      - c74b1ff3-7a83-4492-8c26-b85dc7e1f50a
      - d231b8e6-8277-40ba-ba43-8b3ebe9d4ce1
      - dad91b29-a0e5-495a-b169-a3a7f78e66e2
      - dcecf750-3ca1-418e-a5b6-dca1e383dd74
      - e71b17ec-e0b8-4565-8dc1-2080df360a5e
      - e8253432-4149-4513-b4ab-66ddae5c6e9f
      - edb69968-a252-4f04-91e2-f862df7f0842
      - f678e8cf-4171-42f1-89a2-f9e61af192a7
      - c8626908-14c1-4ed5-96ba-80b6b15c458e
  Subgraph-63:
    id: "63"
    name: ML_FCSTS_DATE_PROD_SALES
    steps:
      - "613"
      - 01869fa3-a55a-4b2d-80ff-e84e59e4e283
      - 060566dc-400a-41ac-ac06-31b6a531a3f1
      - 069788a4-dc62-406e-839f-961e1e66904e
      - 0813ddc0-613c-4ce4-bce8-0a10ec464af8
      - 0d75eac4-4f27-40d9-a3bd-a677b6e4a9cf
      - 0d9082ec-a0f0-4877-b260-231fa26ce355
      - 11a376f1-ac42-4de6-ac9d-dad4150ddc2f
      - 1b456835-de85-4056-954c-f4c0c2ae0251
      - 1f420ab5-fb58-4bac-9a31-506876349c9c
      - 23da740e-50c5-4361-b916-251759082ddb
      - 2d9f453e-f432-4a19-a605-81709e23d574
      - 32499007-8daf-416e-9b0a-940aa0500567
      - 33548f58-a392-4c27-80ed-5783fef0a139
      - 34345fae-180f-4d96-9eb7-f500b1a2892f
      - 35c303fb-2a87-4840-9fb1-9458f2aa6456
      - 3c49b8ad-a39f-4dc6-975c-0dd2c4ce0f25
      - 3e75e110-81b7-4de7-8fc1-d9eb3c7062bb
      - 40946110-8612-4578-98c1-7f839666893a
      - 41d8ed72-6fb3-42ea-81a6-626898e8c162
      - 46ef8c0c-b44c-4d5d-bdc1-1e15c88fbd7b
      - 4bcd4def-5762-46a6-9954-bf1ac94b7585
      - 5260a3f1-390d-4e1f-aff1-4da0c15db0da
      - 528d496d-b0e6-48b8-b605-dbacb930a607
      - 5353d003-2f97-4129-b597-88bcf8da70b5
      - 5b0036c6-f73b-49a8-b51f-46597c418ac8
      - 5f9e1382-ded6-478f-87e6-27ac0d7b03f1
      - 60485eef-5f0f-4e58-88de-e60de6bdd818
      - 6deaf504-e80c-4050-810f-1e356357d18c
      - 72a0e5a7-a669-4c2e-810c-418edf46939a
      - 7ab06a70-1649-455d-a7ff-cc16a3570ab6
      - 7d8b84ba-e9c2-45ce-955a-3f51df08c001
      - 80217ffd-0123-46d0-831b-f27e6326b209
      - 80a6e55c-d942-4309-91f9-8e7e0ff216c8
      - 8ea642ef-4606-44d0-8121-571a15ba33fa
      - 91c3542a-c2f9-472c-8706-d613acb63e06
      - 94c85ee9-190b-467a-9ef9-19358b1dd22c
      - 950b8666-650d-4f58-802d-375d20ae3fb7
      - 9646524a-d0f5-41b7-8d52-4665dbb3c853
      - 987e441b-71d8-4f60-bb5f-7565ab422f6c
      - 98a79ee0-39e1-4d29-9b40-12a08dc9fd23
      - 99510b9e-1d3e-4709-93b8-2042202093b0
      - 9aa63d83-0291-4ab3-8f12-03918a991bbf
      - 9da0baad-a0fb-4bd9-bce8-2e2c3268ae2b
      - 9f6e74ba-2cfd-4fdf-bce6-49d422051b5b
      - a3d87eb5-609c-46ce-b06a-bfdb77d28943
      - af5625d6-1d11-4927-b5cd-5c365d8b8a8c
      - b4585615-226c-470e-8e85-be95816a6df2
      - b598b9b3-9334-4652-9464-6fbe8ec60392
      - c13d0009-e85a-4a02-b34e-131bb850e537
      - c74b1ff3-7a83-4492-8c26-b85dc7e1f50a
      - c8626908-14c1-4ed5-96ba-80b6b15c458e
      - d231b8e6-8277-40ba-ba43-8b3ebe9d4ce1
      - d8a75b99-14b2-44e1-96d6-1f93b61b8d04
      - dad91b29-a0e5-495a-b169-a3a7f78e66e2
      - dcecf750-3ca1-418e-a5b6-dca1e383dd74
      - e71b17ec-e0b8-4565-8dc1-2080df360a5e
      - e7623a14-2963-46b8-beb3-f3d82b2adaea
      - ec04b2d0-34a6-4aaf-a46f-b79f0b88229a
      - edb69968-a252-4f04-91e2-f862df7f0842
      - f5d78cde-c680-4fd5-a97a-eeda91c22b94
      - f678e8cf-4171-42f1-89a2-f9e61af192a7
      - f754b968-8ad1-4d4e-9086-9c91f6ae625b
      - 36edc320-8f30-419b-895a-4c73757b9b46
      - dbd950cf-ea16-48ba-bc70-ca15b18e82e6
  Subgraph-64:
    id: "64"
    name: ML_FCSTS_DATE_MA_CAT_SALES
    steps:
      - "613"
      - 01869fa3-a55a-4b2d-80ff-e84e59e4e283
      - 060566dc-400a-41ac-ac06-31b6a531a3f1
      - 0813ddc0-613c-4ce4-bce8-0a10ec464af8
      - 0d75eac4-4f27-40d9-a3bd-a677b6e4a9cf
      - 0d9082ec-a0f0-4877-b260-231fa26ce355
      - 11a376f1-ac42-4de6-ac9d-dad4150ddc2f
      - 177bc7dc-39c2-4ae7-b14d-150116835254
      - 1b456835-de85-4056-954c-f4c0c2ae0251
      - 1f420ab5-fb58-4bac-9a31-506876349c9c
      - 23da740e-50c5-4361-b916-251759082ddb
      - 2cb902d0-f529-403f-b00c-5892dbd2f1f1
      - 2d9f453e-f432-4a19-a605-81709e23d574
      - 32499007-8daf-416e-9b0a-940aa0500567
      - 33548f58-a392-4c27-80ed-5783fef0a139
      - 34345fae-180f-4d96-9eb7-f500b1a2892f
      - 35c303fb-2a87-4840-9fb1-9458f2aa6456
      - 3c49b8ad-a39f-4dc6-975c-0dd2c4ce0f25
      - 3e75e110-81b7-4de7-8fc1-d9eb3c7062bb
      - 40946110-8612-4578-98c1-7f839666893a
      - 41708d9c-50ea-4410-bb0f-d4febd4c39b7
      - 41d8ed72-6fb3-42ea-81a6-626898e8c162
      - 45d67377-5ec6-4f4c-aab9-a27ef8329b43
      - 46ef8c0c-b44c-4d5d-bdc1-1e15c88fbd7b
      - 4bcd4def-5762-46a6-9954-bf1ac94b7585
      - 5260a3f1-390d-4e1f-aff1-4da0c15db0da
      - 528d496d-b0e6-48b8-b605-dbacb930a607
      - 5353d003-2f97-4129-b597-88bcf8da70b5
      - 5b0036c6-f73b-49a8-b51f-46597c418ac8
      - 5f9e1382-ded6-478f-87e6-27ac0d7b03f1
      - 60485eef-5f0f-4e58-88de-e60de6bdd818
      - 6214df34-3cd9-45e2-9ade-14ee5bb1f3d5
      - 6c152345-7089-4a3e-a1fb-f86646dfb4df
      - 6deaf504-e80c-4050-810f-1e356357d18c
      - 7263eb53-ab14-44c3-803c-55093773bd1a
      - 72a0e5a7-a669-4c2e-810c-418edf46939a
      - 7ab06a70-1649-455d-a7ff-cc16a3570ab6
      - 7d8b84ba-e9c2-45ce-955a-3f51df08c001
      - 80217ffd-0123-46d0-831b-f27e6326b209
      - 80a6e55c-d942-4309-91f9-8e7e0ff216c8
      - 84c5ab19-0359-4da4-a29f-e355062d76cc
      - 8ea642ef-4606-44d0-8121-571a15ba33fa
      - 91c3542a-c2f9-472c-8706-d613acb63e06
      - 94c85ee9-190b-467a-9ef9-19358b1dd22c
      - 950b8666-650d-4f58-802d-375d20ae3fb7
      - 9646524a-d0f5-41b7-8d52-4665dbb3c853
      - 987e441b-71d8-4f60-bb5f-7565ab422f6c
      - 98a79ee0-39e1-4d29-9b40-12a08dc9fd23
      - 99510b9e-1d3e-4709-93b8-2042202093b0
      - 9aa63d83-0291-4ab3-8f12-03918a991bbf
      - 9da0baad-a0fb-4bd9-bce8-2e2c3268ae2b
      - 9f6e74ba-2cfd-4fdf-bce6-49d422051b5b
      - a3d87eb5-609c-46ce-b06a-bfdb77d28943
      - a8d64918-a5cc-42fe-b75c-69824eca67f7
      - af5625d6-1d11-4927-b5cd-5c365d8b8a8c
      - b23c15b6-de95-401e-8f13-8840e97f6a23
      - b4585615-226c-470e-8e85-be95816a6df2
      - b598b9b3-9334-4652-9464-6fbe8ec60392
      - c02462d8-5dde-4487-904e-fe7f163c7ad8
      - c13d0009-e85a-4a02-b34e-131bb850e537
      - c3c5ff3a-7e62-4eef-87c3-2f753ce7e0ec
      - c74b1ff3-7a83-4492-8c26-b85dc7e1f50a
      - c8626908-14c1-4ed5-96ba-80b6b15c458e
      - cbfdd124-b7b6-452a-b143-776ec5b2855c
      - d231b8e6-8277-40ba-ba43-8b3ebe9d4ce1
      - d2448fb0-ea93-4b6a-aba4-f31878348b35
      - d8a75b99-14b2-44e1-96d6-1f93b61b8d04
      - dad91b29-a0e5-495a-b169-a3a7f78e66e2
      - dcecf750-3ca1-418e-a5b6-dca1e383dd74
      - e53fe604-0e25-46fa-b968-1c9361fc63b3
      - e71b17ec-e0b8-4565-8dc1-2080df360a5e
      - e7623a14-2963-46b8-beb3-f3d82b2adaea
      - ec04b2d0-34a6-4aaf-a46f-b79f0b88229a
      - edb69968-a252-4f04-91e2-f862df7f0842
      - f1acc5ea-ca50-48b6-98c7-ced545d1f435
      - f5d78cde-c680-4fd5-a97a-eeda91c22b94
      - f678e8cf-4171-42f1-89a2-f9e61af192a7
      - f754b968-8ad1-4d4e-9086-9c91f6ae625b
      - f9d479c5-bb55-48fc-a88d-79f914230095
version: 2
