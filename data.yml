defaultStorageMapping: null
installedPackages: {}
jobs:
  Job-5:
    excludeSelector: ""
    id: 5
    includeSelector: "+{ location: DWH name: FCT_* } "
    name: Process Fact Tables
    steps:
      - "58"
      - "1532"
    subgraphs: []
  Job-76:
    excludeSelector: ""
    id: 76
    includeSelector: "+{ location: DWH name: DIM_* }"
    name: Process Dimensions
    steps: []
    subgraphs: []
  Job-77:
    excludeSelector: ""
    id: 77
    includeSelector: "{ subgraph: \"Customer\" }"
    name: Process Subgraph Customers
    steps: []
    subgraphs: []
  Job-84:
    excludeSelector: ""
    id: 84
    includeSelector: "+{ location: STAGE name: STG_SUPPLIER1 }"
    name: Customer Job
    steps: []
    subgraphs: []
locations: {}
macros:
  Macro-1:
    id: "1"
    macroString: |-
      {%- macro row_number(order_by, partition_by=[], order='') -%}
          ROW_NUMBER() OVER (
              {%- for p_col in partition_by %}
                  {%- if loop.first %} PARTITION BY {% endif %}
                      {{- p_col -}}
                  {%- if not loop.last %}, {% endif -%}
              {%- endfor -%}
              {%- for o_col in order_by -%}
                  {%- if loop.first %} ORDER BY {% endif -%}
                      {{- o_col -}}
                  {%- if not loop.last %}, {% endif -%}
              {%- endfor -%}
              {% if order != '' %} {{order}}{%- endif %} )
      {%- endmacro -%}



      {%- macro hash(columns, algo='MD5', delimiter='||', length=32) -%}
          {%  for column in columns %}
              {%- if loop.first %}CAST( {{ algo }}({% endif -%}
                  NVL(CAST({{ column }} AS VARCHAR), 'null')
              {%- if not loop.last %} || {% if delimiter != '' %} '{{ delimiter }}' || {% endif -%} {% endif -%}
              {%- if loop.last %}) AS CHAR({{ length }}) ){% endif -%}
          {%  endfor %}
      {%- endmacro -%}


      {%- macro even_odd(column) -%}
          CASE WHEN MOD({{ column }}, 2) = 0 THEN 'EVEN' ELSE 'ODD' END
      {%- endmacro %}


      {%- macro date_sk(column) -%}
          TO_NUMBER(TO_CHAR({{ column }}, 'YYYYMMDD'))
      {%- endmacro %}


      {%- macro replacer(column) -%}
          {% set ns = namespace(col=column) %}
          {% for p in parameters.replace %}
              {% set ns.col = ns.col | replace(p.long,  p.short) %}
          {% endfor %}
          {{ ns.col }}
      {%- endmacro %}
packages: {}
projects: {}
stepTypes:
  StepType-10:
    id: "10"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |
        capitalized: Hub User-Defined
        short: 'HUB'
        plural: 'Hubs'

        tagColor: 'blue'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            - view
            - HH
            default: table

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: true

          - type: multisourceToggle
          
        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |2
              {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}

            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            			{% endif %}
        run:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT DISTINCT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.isHubHash) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}

            {% endif %}
    name: Hub
    version: 1
  StepType-100:
    id: "100"
    isDisabled: true
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Task DAG Root Resume
        short: TGRR
        tagColor: green
        plural: none

        deployStrategy: advanced

        config:
        - groupName: Sceduling Options
          items:
          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: '"DATA_TRANSFORMATION_ROOT_TASK"'
            isRequired: TRUE

        - groupName: "Pre/Post SQL"
          items: 
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: DAG_RESUME_TIMESTAMP
          transform: current_timestamp()::timestamp_ntz
          dataType: timestamp_ntz
          placement: start
          attributeName: dagResumeTS

        - displayName: DAG_ROOT_TASK_NAME
          transform: desiredState.config.rootTask
          dataType: string
          placement: start
          attributeName: dagResumeTS
      templates:
        create:
          templateString: |
            {# Task Info #}
            {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
            {%- set fqRootTaskName = tgtDb + '.' + tgtSch + '.' + desiredState.config.rootTask -%} 

            {{ stage('Try Enable Root Task') }}
            begin
                let sqlDml := 'select system$task_dependents_enable(''{{fqRootTaskName}}'')';
                execute immediate sqlDml;
                return 'Task resumed';
                    exception
                    when statement_error then
                        return 'Task already running';
            end;
        run:
          templateString: ""
    name: Task DAG Resume Root
    version: 1
  StepType-101:
    id: "101"
    isDisabled: true
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Copy of Stream and Insert or Merge
        short: SIM
        tagColor: black
        plural: Streams and Merges

        deployStrategy: advanced

        config:
        - groupName: Stream Options
          items:
          - displayName: Append Only Stream
            attributeName: appendOnly
            type: toggleButton
            default: true
            isRequired: true

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true

        - groupName: Target Loading Options
          items:
          - displayName: Load Type
            attributeName: loadType
            type: dropdownSelector
            default: Insert
            options:
              - Insert
              - Merge
            isRequired: true

          - displayName: Table Key Column(s)
            attributeName: tblKey
            type: columnSelector
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"

          - displayName: Row Update Timestamp Column
            attributeName: tblChgTS
            type: columnSelector
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"
         
        - groupName: Sceduling Options
          items:
          - displayName: Sceduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: "Pre/Post SQL"
          items: 
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |+
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}

            {# Source Stream Location and Name #}
            {% set srcSchName = desiredState.sources[0].dependencies[0].node.location.name %}
            {% set srcDb = desiredState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set srcSch = desiredState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}
            {% set srcTbl = desiredState.sources[0].dependencies[0].node.name %}
            {% set strName = srcTbl + '_STREAM' %}
            {% set fqSrcTblName = '"' + srcDb + '"."' + srcSch + '"."' + srcTbl + '"' %}
            {% set fqStrName = '"' + srcDb + '"."' + srcSch + '"."' + strName + '"' %}
            {% set strFrom = desiredState.sources[0].join | replace(srcTbl, strName) %}

            {# Target Table Info #}
            {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
            {% set tgtTbl = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

            {# Task Info #}
            {% set taskName = desiredState.node.name + '_TASK'  %}
            {%- set fqTaskName = tgtDb + '.' + tgtSch + '."' + taskName + '"' -%} 

            {% set rootTaskName = tgtDb + '.' + tgtSch + '."' + desiredState.config.rootTask + '"' %}
            {% set predTaskList = desiredState.config.predTask.split(",") %}
            {% set predTasks = tgtDb + '.' + tgtSch + '.' + desiredState.config.predTask.replace(',', ',' + tgtDb + '.' + tgtSch + '.') %}

            {% set tblColid = desiredState.columns | map(attribute='id') | list %}
            {% set tblCol = desiredState.columns | map(attribute='name') | list %}
            {% set tblKey = desiredState.columns | selectattr('tblKey', 'defined') | map(attribute='name') | list %}
            {% set tblColUpd = tblCol | reject('in', tblKeys) | list %}
            {%- set tblKeyColStr = '"'+tblKey | join('", "')+'"' -%}
            {% set recTS = desiredState.columns | selectattr('tblChgTS', 'defined') | map(attribute='name') | first %}

            {{ stage('Create Stream') }}
            CREATE OR REPLACE STREAM {{ fqStrName }}
                ON TABLE {{ fqSrcTblName }}
                APPEND_ONLY = {% if desiredState.config.appendOnly == true %} TRUE {% else %} FALSE {% endif %}
                SHOW_INITIAL_ROWS = {% if desiredState.config.initialRows == true %} TRUE {% else %} FALSE {% endif %}

                
            {{ stage('Create Target Table') }}
            CREATE OR REPLACE TABLE {{ tgtTbl }}
                (
                {%- for col in desiredState.columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                )

            {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                {{ stage('Suspend Root Task') }}
                ALTER TASK {{ rootTaskName }} SUSPEND
            {%- endif -%}

            {{ stage('Create Task') }}
                {# Task Type #}
                {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                    {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
                {%- else -%}
                    {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                {%- endif -%}

                {# Schedule Type #}
                {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                    {%- set whenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                    {%- set whenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON %}
                {%- else -%}
                    {%- set whenRun = 'AFTER ' + predTasks -%} 
                {%- endif -%}

                {# When Stream has data logic #}
                {%- if desiredState.config.flagSrcStream == true -%} 
                    {%- set poll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fqStrName + "')" -%} 
                {%- endif -%}
                
                CREATE OR REPLACE TASK 
                    {{ fqTaskName }} 
                    {{ taskType}} 
                    {{ whenRun }} 
                    {{ poll }} 
                AS 
                {% if desiredState.config.loadType == 'Insert' -%} 
                INSERT INTO {{ tgtTbl }}
                SELECT {% for id in tblColid %}
                        {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                        {% set colTran = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                        {%- if colTran == "" -%}
                          "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- else -%}
                          {{ colTran | replace(srcTbl, strName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- endif %}
                    {%- endfor %}
                 {{ strFrom }}
                {% else -%}
                MERGE INTO {{ tgtTbl }} tgt USING
                -- Select Statement Preparing Data for Merge
                (SELECT {% for id in tblColid %}
                        {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                        {% set colTran = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                        {%- if colTran == "" -%}
                          "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- else -%}
                          {{ colTran | replace(srcTbl, strName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- endif %}
                    {%- endfor %}
                 {{ strFrom }}
                 QUALIFY ROW_NUMBER() over (partition by {{ tblKeyColStr }} order by 
                {% if recTS | length > 0 %}
                    "{{ recTS }}" desc
                {% else %}
                    "METADATA$ROW_ID" desc
                {% endif %}
                ) = 1) src
                 -- Join Condition
                 ON {% for col in tblKey -%}
                     src."{{ col }}" = tgt."{{ col }}"
                {% if not loop.last %} AND {% endif %}
                    {%- endfor -%}
                -- What to do if data is matched based on table key
                WHEN MATCHED THEN UPDATE SET 
                    {%- for col in tblColUpd %}
                            tgt."{{ col }}" = src."{{ col }}"
                            {%- if not loop.last -%}, {%- endif %}
                    {%- endfor %}
                -- What to do with new records based on table key
                WHEN NOT MATCHED THEN INSERT 
                    (
                    {%- for col in desiredState.columns -%}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {% endfor %}) 
                VALUES (
                    {%- for col in desiredState.columns -%}
                            src."{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {% endfor %})
                {%- endif -%}

            {{ stage('Resume Task') }}
            {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                select system$task_dependents_enable('{{ rootTaskName }}');
            {%- else -%}
                ALTER TASK {{ fqTaskName }} RESUME;
            {%- endif -%}

            {% elif currentState != undefined and desiredState == undefined %}

            {# Source Stream Location and Name #}
            {% set srcSchName = currentState.sources[0].dependencies[0].node.location.name %}
            {% set srcDb = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set srcSch = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}
            {% set srcTbl = currentState.sources[0].dependencies[0].node.name %}
            {% set strName = srcTbl + '_STREAM' %}
            {% set fqSrcTblName = '"' + srcDb + '"."' + srcSch + '"."' + srcTbl + '"' %}
            {% set fqStrName = '"' + srcDb + '"."' + srcSch + '"."' + strName + '"' %}
            {% set strFrom = currentState.sources[0].join | replace(srcTbl, strName) %}

            {# Target Table Info #}
            {% set tgtDb = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
            {% set tgtTbl = ref_no_link(currentState.node.location.name, currentState.node.name) %}

            {# Task Info #}
            {% set taskName = currentState.node.name + '_TASK'  %}
            {%- set fqTaskName = tgtDb + '.' + tgtSch + '."' + taskName + '"' -%} 

            {% set tblColid = currentState.columns | map(attribute='id') | list %}
            {% set tblCol = currentState.columns | map(attribute='name') | list %}
            {% set tblKey = currentState.columns | selectattr('tblKey', 'defined') | map(attribute='name') | list %}
            {% set tblColUpd = tblCol | reject('in', tblKeys) | list %}
            {%- set tblKeyColStr = '"'+tblKey | join('", "')+'"' -%}
            {% set recTS = currentState.columns | selectattr('tblChgTS', 'defined') | map(attribute='name') | first %}

            {{ stage('Drop Stream') }}
            DROP STREAM IF EXISTS {{ fqStrName }}
            {{ stage('Drop Table') }}
            DROP TABLE IF EXISTS {{ tgtTbl }}

            {%- if desiredState.config.schedulingPeriodOption == 'Predecessor' -%} 
            {{ stage('Suspend Root Task') }}
                ALTER TASK IF EXISTS {{ rootTaskName }} SUSPEND
            {{ stage('Drop Current Task Task') }}
                DROP TASK IF EXISTS {{ fqTaskName }} 
            {{ stage('Resume Root Task') }}
                select system$task_dependents_enable('{{ rootTaskName }}');
            {%- else -%}
                DROP TASK IF EXISTS {{ fqTaskName }} 
            {%- endif -%}

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}

        run:
          templateString: |-
            {# Source Stream Location and Name #}
            {% set srcSchName = desiredState.sources[0].dependencies[0].node.location.name %}
            {% set srcDb = desiredState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set srcSch = desiredState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}
            {% set srcTbl = desiredState.sources[0].dependencies[0].node.name %}
            {% set strName = srcTbl + '_STREAM' %}
            {% set fqSrcTblName = '"' + srcDb + '"."' + srcSch + '"."' + srcTbl + '"' %}
            {% set fqStrName = '"' + srcDb + '"."' + srcSch + '"."' + strName + '"' %}
            {% set strFrom = desiredState.sources[0].join | replace(srcTbl, strName) %}

            {# Target Table Info #}
            {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
            {% set tgtTbl = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

            {# Task Info #}
            {% set taskName = desiredState.node.name + '_TASK'  %}
            {%- set fqTaskName = tgtDb + '.' + tgtSch + '."' + taskName + '"' -%} 

            {% set tblColid = desiredState.columns | map(attribute='id') | list %}
            {% set tblCol = desiredState.columns | map(attribute='name') | list %}
            {% set tblKey = desiredState.columns | selectattr('tblKey', 'defined') | map(attribute='name') | list %}
            {% set tblColUpd = tblCol | reject('in', tblKeys) | list %}
            {%- set tblKeyColStr = '"'+tblKey | join('", "')+'"' -%}
            {% set recTS = desiredState.columns | selectattr('tblChgTS', 'defined') | map(attribute='name') | first %}

            {{ stage('Create Stream') }}
            CREATE OR REPLACE STREAM {{ fqStrName }}
                ON TABLE {{ fqSrcTblName }}
                APPEND_ONLY = {% if desiredState.config.appendOnly == true %} TRUE {% else %} FALSE {% endif %}
                SHOW_INITIAL_ROWS = {% if desiredState.config.initialRows == true %} TRUE {% else %} FALSE {% endif %}

                
            {{ stage('Create Target Table') }}
            CREATE OR REPLACE TABLE {{ tgtTbl }}
                (
                {%- for col in desiredState.columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                )
    name: Stream and Insert or Merge Predecessor - Advanced
    version: 1
  StepType-102:
    id: "102"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: INCREMENTAL
        short: INC
        plural: Incremental
        tagColor: green

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: view
            options:
            - view
            isRequired: true
            enableIf: "false"

          - displayName: Filter data based on Persistent Table
            attributeName: refTable
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Persistent Table based on prefix
            attributeName: persistTable
            type: dropdownSelector
            default: ""
            options:
            - ""
            - "DS"
            - "DIM"
            - "FCT"
            - "SAT"
            - "PSTG"
            isRequired: false
            enableIf: "{{config.refTable}}"

          - displayName: Persistent Table location
            attributeName: persistTableLocation
            type: dropdownSelector
            default: "DWH"
            options:
            - "DWH"
            - "STAGE"
            isRequired: false
            enableIf: "{{config.refTable}}"

          - displayName: Persistent Table name if not selected above
            attributeName: persistTableName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{{config.refTable}}"
      templates:
        create:
          templateString: |
            {% set base = node.name | replace("INC", "") %}
            {% if config.persistTableName | length > 0 %}
                {% set persist = config.persistTableName %}
            {% else %}
                {% set persist = config.persistTable + base %}
            {% endif %}
            {% set source = sources[0] %}


            {{ stage('Create Stage View') }}

            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns if col.name != "_SEQUENCE" %}
                    "{{ col.name }}"
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {% if not loop.last %}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            AS
            SELECT
            {% for col in source.columns  %}
                {{ get_source_transform(col) }} AS  "{{ col.name }}" 
                {%- if not loop.last -%}, {% endif %} 
            {% endfor %}

            {{ source.join }}

            {% if config.refTable and persist | length > 0  %}
                {% if "WHERE" in source.join | upper %}
                    AND
                {% else %}
                    WHERE 
                {% endif %}
                _FIVETRAN_SYNCED > (SELECT NVL(MAX(_FIVETRAN_SYNCED), '1900-01-01') 
                                    FROM {{ref(config.persistTableLocation, persist)}} )
            {% endif %}
        run:
          templateString: ""
    name: Fivetran Incremental
    version: 1
  StepType-11:
    id: "11"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |
        capitalized: Link User-Defined
        short: 'LNK'
        plural: 'Links'
        tagColor: 'red'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Insert Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
          
          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                           {{ stage('Create Link Table') }}
             
                           CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                           (
                               {% for col in columns %}
                                   "{{ col.name }}" {{ col.dataType }}
                                   {%- if not col.nullable %} NOT NULL
                                       {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                   {% endif %}
                                   {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                                   {%- if not loop.last -%}, {% endif %}
                               {% endfor %}
                           )
                           {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
             
                       {% endif %}
        run:
          templateString: |
            {% if node.materializationType == 'table' %}
               {% if config.preSQL %}
                   {{ stage('Pre-SQL') }}
                   {{ config.preSQL }}
              
               {% endif %}
             
                      
               {{ stage('Merge Link') }}
               MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
               (
                   {% for source in sources %}
                   SELECT
                   {% for col in source.columns %}
                       {{ get_source_transform(col) }} AS "{{ col.name }}"
                       {%- if not loop.last -%}, {% endif %}
                   {% endfor %}
             
                   {{ source.join }}
             
                   {% if not loop.last %}
                       {{ config.insertStrategy }}
                   {% endif %}
               {% endfor %}
               )
               AS "SRC"
               ON
               {% for col in sources[0].columns if (col.isLinkHash) -%}
                   {% if not loop.first %}
                       AND
                   {% endif %}
                   "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
               {% endfor %}
               WHEN NOT MATCHED THEN
               INSERT
               (
                   {% for col in columns %}
                       "{{ col.name }}"
                       {%- if not loop.last -%}, {% endif %}
                   {% endfor %}
               ) VALUES
               (
                   {% for col in columns %}
                       "SRC"."{{ col.name }}"
                       {%- if not loop.last -%}, {% endif %}
                   {% endfor %}
               )
             
               {% if config.postSQL %}
                   {{ stage('Post-SQL') }}
                   {{ config.postSQL }}   
               {% endif %}
            {% endif %}
    name: Link
    version: 1
  StepType-111:
    id: "111"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: INCREMENTAL
        short: INC
        plural: Incremental
        tagColor: green

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: view
            options:
            - view
            isRequired: true
            enableIf: "false"

          - displayName: Filter data based on Persistent Table
            attributeName: refTable
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Persistent Table based on prefix
            attributeName: persistTable
            type: dropdownSelector
            default: ""
            options:
            - ""
            - "DS"
            - "DIM"
            - "FCT"
            - "SAT"
            - "PSTG"
            isRequired: false
            enableIf: "{{config.refTable}}"

          - displayName: Persistent Table name if not selected above
            attributeName: persistTableName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{{config.refTable}}"
      templates:
        create:
          templateString: |
            {% set base = node.name | replace("INC", "") %}
            {% if config.persistTableName | length > 0 %}
                {% set persist = config.persistTableName %}
            {% else %}
                {% set persist = config.persistTable + base %}
            {% endif %}
            {% set source = sources[0] %}


            {{ stage('Create Stage View') }}

            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns if col.name != "_SEQUENCE" %}
                    "{{ col.name }}"
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {% if not loop.last %}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            AS
            SELECT
            {% for col in source.columns  %}
                {{ get_source_transform(col) }} AS  "{{ col.name }}" 
                {%- if not loop.last -%}, {% endif %} 
            {% endfor %}

            {{ source.join }}

            {% if config.refTable and persist | length > 0  %}
                {% if "WHERE" in source.join | upper %}
                    AND
                {% else %}
                    WHERE 
                {% endif %}
                CDC_TIMESTAMP > (SELECT NVL(MAX(CDC_TIMESTAMP), '1900-01-01') FROM {{ref('DWH', persist)}} )
            {% endif %}
        run:
          templateString: ""
    name: CDC Table Incremental
    version: 1
  StepType-12:
    id: "12"
    isDisabled: true
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Effectivity Satellite User-Defined
        short: 'EFF_SAT'
        plural: 'Satellites'
        tagColor: 'yellow'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

         
          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: true

          - displayName: Driving Key Column
            type: columnSelector
            attributeName: isDrivingKey
            isRequired: true


        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |2-
              {% if node.materializationType == 'table' %}
            				{{ stage('Create Effectivity Satellite Table') }}

            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            			{% endif %}
        run:
          templateString: |-
            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}

            	{{ stage('Insert New Rows') }}
            	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            	WITH "SAT_CURR_ROWS" AS (
            		/* get current rows from satellite */
            		{% for col in columns if col.isDrivingKey or col.isLinkHash %}
            			{%- if loop.first -%}SELECT {% endif %} 
            			{{col.name}}
            			{%- if not loop.last -%}, {% endif %}
            			{%- if loop.last %} 
            				FROM {{ ref_no_link(node.location.name, node.name) }} 
            				QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isDrivingKey") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
            			{% endif %}
            		{% endfor %}
            	)

            		{% for source in sources %}
            			SELECT DISTINCT
            			{% for col in source.columns %}
            				{{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}

            			{{ source.join }}
            		WHERE NOT EXISTS(
            			SELECT 1 FROM "SAT_CURR_ROWS"
            			WHERE 
            			{% for col in source.columns if col.isDrivingKey or col.isLinkHash %}
            				{% if not loop.first %}
            					AND
            				{% endif %}
            				{{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
            			{% endfor %}
            		)

            		{% endfor %}

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}

            {% endif %}
    name: Satellite - Effectivity
    version: 1
  StepType-120:
    id: "120"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Stage View
        short: 
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: Stage View
    version: 1
  StepType-138:
    id: "138"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: ML FORECAST
        short: ML_FORECAST
        tagColor: 'red'
        plural: ML Forecasts

        config:
        - groupName: Entity Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true
          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            enableIf: "{{ node.materializationType == 'table' }}"

        - groupName: Forecast Model Input
          items:
            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: false
            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: false
            - displayName: Days To Forecast
              attributeName: fcdays
              type: textBox
              isRequired: true
              default: '30'

        - groupName: Forecast Model Output
          items:
            - type: toggleButton
              displayName: 'Include Source Data'
              attributeName: 'addsourcedata'
              isRequired: false
              default: 'true'

        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
      templates:
        create:
          templateString: |
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'forecast_' ~ src_node.name %}

            {{ stage('Create Forecast Model Instance') }}

            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {% for col in source.columns if not col.forecast and not col.lower_bound and not col.upper_bound %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}
                '),
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
            )

            {% if node.materializationType == 'table' %}
            	{{ stage('Create Forecast Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}

                {{ stage('Refresh Forecast') }}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST({{ config.fcdays }})

                {{ stage('Create Forecast View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                SELECT
                {% for col in source.columns %}       
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}

                {{ source.join }}

                {% if config.unionforecast %}
                UNION ALL
                SELECT
                {% for col in source.columns %}
                    {% if col.id == config.tscol.id %}
                        "TS"
                    {% elif col.id == config.tgtcol.id %}
                        NULL
                    {% elif col.forecast or col.lower_bound or col.upper_bound %}
                        "{{ col.name }}"
                    {% else %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                FROM TABLE(RESULT_SCAN(-1))
                {% endif %}

            {% endif %}
        run:
          templateString: |
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'forecast_' ~ src_node.name %}

            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{{ stage('Insert ' + source.name | string ) }}

            		BEGIN
            		CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST({{ config.fcdays }});

            		INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            		(
            			{% for col in source.columns %}
            				"{{ col.name }}"
            				{%- if not loop.last -%},{% endif %}
            			{% endfor %}
            		)
            		{% if config.addsourcedata %}
            		SELECT
            		{% for col in source.columns %}
            			{{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		UNION ALL
            		{% endif %}

            		SELECT
            		{% for col in source.columns %}
            			{% if col.id == config.tscol.id %}
            				"TS"
            			{% elif col.id == config.tgtcol.id %}
            				NULL
            			{% elif col.forecast or col.lower_bound or col.upper_bound %}
            				"{{ col.name }}"
            			{% else %}
            				{{ get_source_transform(col) }} AS "{{ col.name }}"
            			{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		FROM TABLE(RESULT_SCAN(-1));
            		END

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: ML Forecast
    version: 1
  StepType-141:
    id: "141"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of ML FORECAST
        short: ML_FORECAST
        tagColor: 'red'
        plural: ML Forecasts

        config:
        - groupName: Entity Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            enableIf: "{{ node.materializationType == 'table' }}"

        - groupName: Forecast Model Input
          items:

            - type: toggleButton
              displayName: 'Refresh Model each run'
              attributeName: 'refreshmodel'
              isRequired: true
              default: 'true'

            - type: toggleButton
              displayName: 'Multi-Series Forecast'
              attributeName: 'multiseries'
              isRequired: false
              default: 'true'

            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true

            - displayName: Days To Forecast
              attributeName: fcdays
              type: textBox
              isRequired: true
              default: '30'

        - groupName: Forecast Model Output
          items:
            - type: toggleButton
              displayName: 'Include Source Data'
              attributeName: 'addsourcedata'
              isRequired: false
              default: 'true'

        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
      templates:
        create:
          templateString: |
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'forecast_' ~ src_node.name %}

            {{ stage('Create Forecast Model Instance') }}

            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {% for col in source.columns if not col.forecast and not col.lower_bound and not col.upper_bound %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}" {%- if not loop.last -%}, {%- endif -%}
                    {% endfor %}
                    {{ source.join }}
                '),
                {%- if config.multiseries -%}SERIES_COLNAME => '{{ config.seriescol.name }}',{%- endif -%}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
            )

            {% if node.materializationType == 'table' %}
            	{{ stage('Create Forecast Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}

                {{ stage('Refresh Forecast') }}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST({{ config.fcdays }})

                {{ stage('Create Forecast View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                SELECT
                {% for col in source.columns %}       
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}

                {{ source.join }}

                {% if config.unionforecast %}
                UNION ALL
                SELECT
                {% for col in source.columns %}
                    {% if col.id == config.tscol.id %}
                        "TS"
                    {% elif col.id == config.tgtcol.id %}
                        NULL
                    {% elif col.forecast or col.lower_bound or col.upper_bound %}
                        "{{ col.name }}"
                    {% else %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                FROM TABLE(RESULT_SCAN(-1))
                {% endif %}

            {% endif %}
        run:
          templateString: |
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'forecast_' ~ src_node.name %}

            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
            {% endfor %}

            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'forecast_' ~ src_node.name %}

            {% if config.refreshmodel %}
            {{ stage('Recreate Forecast Model Instance') }}

            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {% for col in source.columns if not col.forecast and not col.lower_bound and not col.upper_bound %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}" {%- if not loop.last -%}, {%- endif -%}
                    {% endfor %}
                    {{ source.join }}
                '),
                {%- if config.multiseries -%}SERIES_COLNAME => '{{ config.seriescol.name }}',{%- endif -%}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'

            {% endif %}


            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{{ stage('Insert ' + source.name | string ) }}

            		BEGIN
            		CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST({{ config.fcdays }});

            		INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            		(
            			{% for col in source.columns %}
            				"{{ col.name }}"
            				{%- if not loop.last -%},{% endif %}
            			{% endfor %}
            		)
            		{% if config.addsourcedata %}
            		SELECT
            		{% for col in source.columns %}
            			{{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		UNION ALL
            		{% endif %}

            		SELECT
            		{% for col in source.columns %}
            			{% if col.id == config.tscol.id %}
            				"TS"
            			{% elif col.id == config.tgtcol.id %}
            				NULL
            			{% elif col.forecast or col.lower_bound or col.upper_bound %}
            				"{{ col.name }}"
            			{% else %}
            				{{ get_source_transform(col) }} AS "{{ col.name }}"
            			{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		FROM TABLE(RESULT_SCAN(-1));
            		END

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: ML Forecast Multi-Series
    version: 1
  StepType-144:
    id: "144"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Stream
        short: STR
        tagColor: "yellow"
        plural: CDC Tables

        deployStrategy: advanced

        config:

        - groupName: Task
          items:

          - displayName: Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Append Only
            attributeName: appendOnly
            type: toggleButton
            default: false
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: view
            options:
            - view
            isRequired: true

        systemColumns:
        - displayName: "METADATA$ACTION"
          transform: "METADATA$ACTION"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataAction
          description: Indicates the DML operation (INSERT, DELETE) recorded.
        - displayName: "METADATA$ISUPDATE"
          transform: "METADATA$ISUPDATE"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataIsUpdate
          description: Indicates whether the operation was part of an UPDATE statement.
        - displayName: "METADATA$ROW_ID"
          transform: "METADATA$ROW_ID"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataRowId
          description: Specifies the unique and immutable ID for the row, which can be used to track changes to specific rows over time.
      templates:
        create:
          templateString: |-
            {% if desiredState == undefined %}
              {{ stage('Drop Dynamic Table') }}
              DROP STREAM {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}

            {% else %}

                {{ stage('Create Stream') }}
                CREATE OR REPLACE STREAM {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                ON TABLE {{ ref(desiredState.sources[0].dependencies[0].node.location.name, desiredState.sources[0].dependencies[0].node.name) }}
                APPEND_ONLY = {% if desiredState.config.appendOnly is true %} TRUE {%- else -%} FALSE {% endif %} 
                SHOW_INITIAL_ROWS = {% if desiredState.config.initialRows is true %} TRUE {%- else -%} FALSE {% endif %} 
                COMMENT = 'CDC Stream on {{ this }}'

            {% endif %}
        run:
          templateString: |-
            {% if config.taskEnabled is true %}
                {{ stage('Resume Task') }}
                ALTER TASK
                {% if config.taskCustomName != '' %}
                    {{ ref_no_link(node.location.name, config.taskCustomName) }}
                {% else %}
                    {{ ref_no_link(node.location.name, "TSK_" + node.name) }}
                {% endif %}
                RESUME
            {% else %}
                {{ stage('Insert From Stream') }}
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {% if col.name == 'CDC_ID' %}
                            {{ ref_no_link(node.location.name, "SEQ_" + node.name) }}.NEXTVAL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    FROM {{ ref_no_link(node.location.name, "STR_" + node.name) }} AS "{{ sources[0].dependencies[0].node.name }}"
                    {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                        {{config.insertStrategy}}
                    {% endif %}
                {% endfor %}
            {% endif %}
    name: Stream
    version: 1
  StepType-153:
    id: "153"
    isDisabled: false
    metadata:
      defaultStorageLocation: TGT_HL
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of View
        short: VW
        tagColor: 'blue'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: VW View
    version: 1
  StepType-154:
    id: "154"
    isDisabled: false
    metadata:
      defaultStorageLocation: TGT_HL
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of View
        short: 
        tagColor: 'green'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: TMP View
    version: 1
  StepType-16:
    id: "16"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: External Table
        short: 'EXT'
        tagColor: '#C39BD3'
        isDisabled: false
        plural: External Tables

        deployStrategy: advanced

        config:
        - groupName: File Location
          items: 

          - displayName: Stage
            attributeName: fileLocation
            type: dropdownSelector
            default: "DOUGS32"
            options:
            - "DOUGS32"
            - "Create external stages on Snowflake"
            - "Place them in the same storage location"
            - "List the storage locations in this dropdown"
            isRequired: true

          - displayName: File Pattern
            attributeName: filePattern
            type: textBox
            default: ".*[.]json"
            isRequired: true

        - groupName: File Format 
          items:
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: JSON
            options:
            - "CSV"
            - "JSON"
            - "Parquet"
            - "XML"
            isRequired: true

          - displayName: Compression
            attributeName: compression
            enableIf: "{{ config.fileType in ['CSV','JSON'] }}" 
            type: dropdownSelector
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Additional Options
          items:
          - displayName: Auto Refresh
            attributeName: autoRefresh
            type: toggleButton
            default: false
            isRequired: false

          - displayName: AWS SNS Topic
            attributeName: snsTopic
            type: textBox
            enableIf: "{{ config.autoRefresh }}"
            default: "arn:aws:sns:us-east-1:121674918127:prod-emea-s3-notification"
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: true

        systemColumns:

        - displayName: 'VALUE'
          attributeName: 'VALUE'
          transform: ''
          dataType: VARIANT
          placement: beginning
        - displayName: 'METADATA$FILENAME'
          attributeName: 'METADATA$FILENAME'
          transform: ''
          dataType: STRING
          placement: end
      templates:
        create:
          templateString: |-
            {% if desiredState is undefined %}
              {{ stage('Drop External Table') }}
              DROP EXTERNAL TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}

            {% else %}

            {{ stage('Create External Table') }}

            CREATE OR REPLACE EXTERNAL TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
              {% if desiredState.config.fileType == "CSV" %}
                {% for col in desiredState.sources[0].columns if (col.name | upper != "VALUE" and col.name | upper != "METADATA$FILENAME") %}
                  {% if loop.first %}({% endif %}
                    "{{ col.name }}" {{ col.dataType }} AS (value:c{{ loop.index }}::{{ col.dataType }})
                  {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                  {%- if not loop.last -%}, {% else %}){% endif %}
                {% endfor %}
              {% endif %}
              
              with location = @{{desiredState.parameters.stage_location}}.{{desiredState.config.fileLocation | upper}}
              pattern='{{ desiredState.config.filePattern }}'
              file_format = (type = {{ desiredState.config.fileType }}
              {% if desiredState.config.fileType == "CSV" %}
                {% if desiredState.config.recDelim != null %}record_delimiter = '{{ desiredState.config.recDelim }}'{% endif %}
                {% if desiredState.config.fieldDelim != null %}field_delimiter = '{{ desiredState.config.fieldDelim }}'{% endif %}
                {% if desiredState.config.fieldEnclosed != null %}field_optionally_enclosed_by = '{{ desiredState.config.fieldEnclosed }}'{% endif %}
                {% if desiredState.config.skipHeader != null %}skip_header = {{ desiredState.config.skipHeader }}{% endif %}
                {% if desiredState.config.skipBlankLines %}skip_blank_lines = {{ desiredState.config.skipBlankLines }}{% endif %}
                {% if desiredState.config.trimSpace %}trim_space = {{ desiredState.config.trimSpace }}{% endif %}
              {% endif %}
              )
              auto_refresh = {{ desiredState.config.autoRefresh }}
              {% if desiredState.config.autoRefresh and desiredState.config.snsTopic != null %}aws_sns_topic = '{{ desiredState.config.snsTopic }}'{% endif %}
              {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description }}'{% endif %}
            ;
            {% endif %}
        run:
          templateString: |-
            {% if config.autoRefresh is false %}
            {{ stage('Refresh External Table') }}
            ALTER EXTERNAL TABLE {{ ref_no_link(node.location.name, node.name) }} REFRESH
            {% endif %}
    name: External Table
    version: 1
  StepType-166:
    id: "166"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:

          - type: businessKeyColumns
            isRequired: true

        - groupName: Advanced Options
          items:

          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: changeTrackingColumns
            isRequired: false

          - type: toggleButton
            attributeName: insertZeroKey
            displayName: Insert Zero Key Record
            default: true

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}

            	{% if config.insertZeroKey %}

            		{{ stage('Insert Zero Record') }}
            		INSERT INTO {{ this }}
            		(SELECT 
            		{% for col in sources[0].columns %}
            			{% set dtparams = col.dataType.partition('(')[-1].rpartition(')')[0].split(',') %}
            			{% if col.isSurrogateKey %}0
            				{% elif col.isSystemCurrentFlag %}'Y'
            				{% elif col.isSystemStartDate or col.isSystemEndDate or col.isSystemUpdateDate or col.isSystemCreateDate %}{{ get_source_transform(col) }}
            				{% elif col.isSystemVersion%}1
            				{% elif col.dataType[:3] | upper in ('NUM','INT','DEC','FLO') %}0
            				{% elif col.dataType[:4] | upper in ('DATE','TIME') %}CAST('0001-01-01' AS {{ col.dataType }})
            				{% elif col.dataType[:3] | upper in ('VAR','CHA','STR','BIN') %}
            					{% if dtparams[0] and dtparams[0] | int < 7 %}
            						SUBSTRING('UNKNOWN',1,{{ dtparams[0] }})
            					{% else %}
            						'UNKNOWN'
            					{% endif %}
            				{% elif col.nullable %}NULL
            				{% else %}''
            			{% endif %}
            			AS "{{ col.name }}"
            			{% if not loop.last %}, {% endif %}
            		{% endfor %}
            		)
            	{% endif %}

            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension v2
    version: 1
  StepType-17:
    id: "17"
    isDisabled: true
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: UNLOAD
        short: 'EXPORT'
        tagColor: 'dodgerblue'
        isDisabled: false
        plural: Unloads

        config:
        - groupName: File Location
          items: 

          - displayName: Stage
            attributeName: fileLocation
            type: dropdownSelector
            default: "DOUG_DB.PUBLIC.DOUGS3"
            options:
            - "DOUG_DB.PUBLIC.DOUGS3"
            - "Name of Snowflake STAGE"
            - "Add STAGE to Template"
            isRequired: true

        - groupName: File Format 
          items:
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: CSV
            options:
            - "CSV"
            - "JSON"
            - "Parquet"
            isRequired: true

          - displayName: Compression
            attributeName: compression
            enableIf: "{{ config.fileType in ['CSV','JSON'] }}" 
            type: dropdownSelector
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Additional Options
          items:
          - displayName: Overwrite existing files
            attributeName: overwrite
            type: toggleButton
            default: true
            isRequired: false
          - displayName: Single file
            attributeName: singleFile
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: false
      templates:
        create:
          templateString: |-
            {{ stage('Nothing to create') }}
            SELECT 1
        run:
          templateString: |-
            {% for source in sources %}
                {% for dep in source.dependencies if dep.node %}
                    {{ stage('Unloading ' + dep.node.name | string ) }}
                    COPY INTO @{{ ref_no_link(node.location.name, config.fileLocation) | trim | upper ~ "/" ~ node.name }}{% if config.singleFile %}.{{ config.fileType | lower }}{% endif %}
                    FROM {{ ref_no_link(dep.node.location.name, dep.node.name) | upper }}
                    overwrite = {{ config.overwrite }}
                    single = {{ config.singleFile }}
                    file_format = (type = {{ config.fileType }}
                    {% if config.fileType == "CSV" %}
                        {% if config.recDelim != null %}record_delimiter = '{{ config.recDelim }}'{% endif %}
                        {% if config.fieldDelim != null %}field_delimiter = '{{ config.fieldDelim }}'{% endif %}
                        {% if config.fieldEnclosed != null %}field_optionally_enclosed_by = '{{ config.fieldEnclosed }}'{% endif %}
                        {% if config.skipHeader != null %}skip_header = {{ config.skipHeader }}{% endif %}
                        {% if config.skipBlankLines %}skip_blank_lines = {{ config.skipBlankLines }}{% endif %}
                        {% if config.trimSpace %}trim_space = {{ config.trimSpace }}{% endif %}
                    {% endif %}
                    )
                {% endfor %}
            {% endfor %}
    name: Unload
    version: 1
  StepType-180:
    id: "180"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Snowpark Stage
        short: PY
        plural: Snowpark stages
        tagColor: 'blue'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true
            enableIf: "false"

          - displayName: Write Mode
            attributeName: writeMode
            type: dropdownSelector
            default: overwrite
            options: 
            - overwrite
            - append
            enableIf: "true"

          - displayName: Python Libraries
            attributeName: pyLib
            type: textBox 
            syntax: sql
            isRequired: false   
            default: "import snowflake.snowpark as snowpark"

          - displayName: Dataframe Commands (df_raw -> df_final)
            attributeName: dfcmd
            type: textBox 
            syntax: sql
            isRequired: true    
            default: " \n
        df_filtered = df_raw.filter(\"C_ACCTBAL > 5000\")\n
        df_distinct = df_filtered.distinct()\n
        df_final = df_distinct.na.drop(subset=\"C_PHONE\")\n
        "

          - displayName: "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/latest/dataframe"
            attributeName: Info
            type: label
      templates:
        create:
          templateString: |-
            {{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{%- for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}



            {{ stage('Create Python Procedure ') }}
            {% set source = sources[0] %}

            CREATE OR REPLACE PROCEDURE {{ ref_no_link(node.location.name, 'PROC_' + node.name | upper) | trim }}()
              returns string not null
              language python
              runtime_version = '3.8'
              packages = ('snowflake-snowpark-python', 'pandas') 
              handler = 'stage_py'
            as
            $$
            {{ config.pyLib }}

            def stage_py(snowpark_session):
              df_raw = snowpark_session.sql('''SELECT 
              {%- for col in source.columns %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"
            	{%- if not loop.last -%}, {% endif %}
              {%- endfor %} {{ source.join }} '''.rstrip())

            {%- set dfca = config.dfcmd.split('\n') %}
            {%- for dfc in dfca %}
              {{ dfc.lstrip() }}
            {%- endfor %}
              df_final.write.mode("{{config.writeMode}}").save_as_table('{{this}}')
              return str(df_raw.count()) + " rows input - " +  str(df_final.count()) + " rows output"
            $$
        run:
          templateString: |-
            {{ stage('Run Stored Procedure') }}
            CALL {{ ref_no_link(node.location.name, 'PROC_' + node.name | upper) | trim }}()
    name: Snowpark Stage Table
    version: 1
  StepType-187:
    id: "187"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: API Call
        short: API
        plural: Excel Files
        tagColor: 'orange'
        config:
        - groupName: Documentation
          items:

          - displayName: Documentation
            attributeName: doc
            synatx: sql
            type: textBox
            default: "
        -- Create a Network Rule on Snowflake
        CREATE OR REPLACE  NETWORK RULE COALESCE_API_RULE
        MODE = EGRESS
        TYPE = HOST_PORT
        VALUE_LIST = ('APP.COALESCESOFTWARE.IO');

        -- Create Integration to access Coalesce API
        CREATE OR REPLACE EXTERNAL ACCESS INTEGRATION COALESCE_API_INTEGRATION
        ALLOWED_NETWORK_RULES = (COALESCE_API_RULE)
        ENABLED=TRUE;"

        - groupName: Options
          items:
          - displayName: Snowflake EXTERNAL ACCESS INTEGRATION Name
            attributeName: extIntegration
            type: textBox
            default: "COALESCE_API_INTEGRATION"
            isRequired: true

          - displayName: Method
            attributeName: method
            type: dropdownSelector
            default: "get"
            options:
            - "get"
            - "post"
            - "put"
            isRequired: true

          - displayName: URI
            attributeName: uri
            type: textBox
            default: 'https://app.coalescesoftware.io/api/v1/runs'
            isRequired: true

          - displayName: Headers
            attributeName: headers
            type: textBox
            default: '{
                "accept": "application/json",
                "authorization": "Bearer "
            }'
            isRequired: false

          - displayName: Payload
            attributeName: payload
            type: textBox
            default: ''
            isRequired: false

        systemColumns:
        - displayName: 'URI'
          attributeName: uri
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: 'RESPONSE'
          attributeName: value
          transform: ''
          dataType: VARIANT
          placement: end
      templates:
        create:
          templateString: |-
            {{ stage('Create Table') }}
            CREATE OR REPLACE TABLE {{ this }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}



            {{ stage('Create Python Procedure ') }}
            CREATE OR REPLACE PROCEDURE {{ ref_no_link(node.location.name, 'PROC_' + node.name | upper) | trim }}()
            RETURNS STRING
            language python
            runtime_version=3.8
            handler = 'call_api'
            external_access_integrations=(COALESCE_API_INTEGRATION)
            packages = ('snowflake-snowpark-python','requests','pandas')
            as 
            $$
            import _snowflake
            import requests
            import json
            from snowflake.snowpark.functions import sql_expr
            from snowflake.snowpark.functions import lit 

            def call_api(snowpark_session):
            	h = json.loads('''{{config.headers}}''')
            	{% if config.payload != None and config.payload != "" %}p = json.loads('''{{config.payload}}'''){% endif%}
            	uri = '''{{config.uri}}'''
            	response = requests.{{ config.method }}(uri, headers=h {%- if config.payload != None and config.payload != ""%}, payload=p {%- endif%})
            	data = response.text
            	df = snowpark_session.create_dataframe([data]).to_df("RESPONSE")
            	df = df.withColumn("RESPONSE",sql_expr("parse_json(RESPONSE)"))
            	df = df.with_column('URI', lit(uri))
            	df.write.mode("overwrite").save_as_table('{{this}}')
            	return str(data)
            $$;
        run:
          templateString: |-
            {{ stage('Run Stored Procedure') }}
            CALL {{ ref_no_link(node.location.name, 'PROC_' + node.name | upper) | trim }}()
    name: API Call
    version: 1
  StepType-191:
    id: "191"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: ML FORECAST MS
        short: ML_FCSTS
        tagColor: 'red'
        plural: ML Forecasts

        config:
        - groupName: Entity Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true
            enableIf: "false"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            enableIf: "{{ node.materializationType == 'table' }}"

        - groupName: Forecast Model Input
          items:

            - type: toggleButton
              displayName: 'Refresh Model each run'
              attributeName: 'refreshmodel'
              isRequired: true
              default: 'true'

            - type: toggleButton
              displayName: 'Multi-Series Forecast'
              attributeName: 'multiseries'
              isRequired: false
              default: 'true'

            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true

            - displayName: Days To Forecast
              attributeName: fcdays
              type: textBox
              isRequired: true
              default: '30'

        - groupName: Forecast Model Output
          items:
            - type: toggleButton
              displayName: 'Include Source Data'
              attributeName: 'addsourcedata'
              isRequired: false
              default: 'true'

        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
      templates:
        create:
          templateString: |
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {{ stage('Create Forecast Model Instance') }}

            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {% for col in source.columns if not col.forecast and not col.lower_bound and not col.upper_bound %}
                        {%- if col.name == config.tscol.name %}"{{ col.name }}"::TIMESTAMP
                        {%- elif col.name == config.tgtcol.name %}"{{ col.name }}"::FLOAT
                        {%- else %}"{{ col.name }}"
                        {%- endif %} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
            )

            {% if node.materializationType == 'table' %}
                {{ stage('Create Forecast Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}

                {{ stage('Refresh Forecast') }}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST({{ config.fcdays }})

                {{ stage('Create Forecast View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                SELECT
                {% for col in source.columns %}       
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}

                {{ source.join }}

                {% if config.unionforecast %}
                UNION ALL
                SELECT
                {% for col in source.columns %}
                    {% if col.id == config.tscol.id %}
                        "TS"
                    {% elif col.id == config.tgtcol.id %}
                        NULL
                    {% elif col.forecast or col.lower_bound or col.upper_bound %}
                        "{{ col.name }}"
                    {% else %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                FROM TABLE(RESULT_SCAN(-1))
                {% endif %}

            {% endif %}
        run:
          templateString: |+
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
                {% if config.preSQL %}
                    {{ stage('Pre-SQL') }}
                    {{ config.preSQL }}
                {% endif %}
                
                
                
                    {% if config.truncateBefore %}
                
                        {{ stage('Truncate Stage Table') }}
                        TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
                
                    {% endif %}
                
                
                    {{ stage('Insert ' + source.name | string ) }}

                    BEGIN
                    CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST({{ config.fcdays }});

                    INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in source.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {% if config.addsourcedata %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    UNION ALL
                    {% endif %}

                    SELECT
                    {% for col in source.columns %}
                        {% if col.id == config.tscol.id %}
                            "TS"
                        {% elif col.id == config.tgtcol.id %}
                            NULL
                        {% elif col.forecast or col.lower_bound or col.upper_bound %}
                            "{{ col.name }}"
                        {% else %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    FROM TABLE(RESULT_SCAN(-1));
                    END

                {% if config.postSQL %}
                    {{ stage('Post-SQL') }}
                    {{ config.postSQL }}
                {% endif %}
            {% endif %}

            {% if config.testsEnabled %}
                {% for test in node.tests %}
                    {% if test.runOrder == 'After' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% for column in columns %}
                    {% for test in column.tests %}
                        {{ test_stage(column.name + ": " + test.name) }}
                        {{ test.templateString }}
                    {% endfor %}
                {% endfor %}
            {% endif %}

    name: ML Forecast Series
    version: 1
  StepType-195:
    id: "195"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: JDBC Load
        short: JDBC
        plural: JDBC Loads
        tagColor: 'orange'
        config:

        - groupName: Options
          items:
          - displayName: JDBC Driver
            attributeName: jdbc_driver
            type: dropdownSelector
            default: "com.microsoft.sqlserver.jdbc.SQLServerDriver"
            options:
            - "com.microsoft.sqlserver.jdbc.SQLServerDriver"
            - "oracle.jdbc.driver.OracleDriver"
            - "com.mysql.jdbc.Driver"
            isRequired: true

          - displayName: JDBC URL
            attributeName: jdbc_url
            type: textBox
            default: "jdbc:sqlserver://coalesce-source.database.windows.net:1433;database=coalesce_source"
            isRequired: true

          - displayName: SQL
            attributeName: sql
            type: textBox
            default: "SELECT * FROM saleslt.customer"
            isRequired: true

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            
        systemColumns:
        - displayName: 'DATA'
          attributeName: data
          transform: ''
          dataType: VARIANT
          placement: beginning

        - displayName: SYSTEM_LOAD_TIMESTAMP
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate
      templates:
        create:
          templateString: |+
            {{ stage('Create Table') }}
            CREATE OR REPLACE TABLE {{ this }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}

        run:
          templateString: |-
            {% if config.truncateBefore %}
            	
                {{ stage('Truncate Table') }}
                TRUNCATE IF EXISTS {{ this }}

            {% endif %}


            {{ stage('Run Insert Function') }}
            INSERT INTO {{this}} (DATA, SYSTEM_LOAD_TIMESTAMP)
            SELECT DATA, CURRENT_TIMESTAMP FROM TABLE (DOUG_DB.PUBLIC.READ_JDBC(OBJECT_CONSTRUCT(
                'driver', '{{config.jdbc_driver}}',
                'url', '{{config.jdbc_url}}'),
                '{{config.sql}}'
            ))
    name: JDBC Load
    version: 1
  StepType-198:
    id: "198"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: ML FORECAST 2
        short: ML_FCSTS
        tagColor: 'blue'
        plural: ML Forecasts

        config:

        - groupName: Forecast Model Input
          items:

            - type: toggleButton
              displayName: 'Multi-Series Forecast'
              attributeName: 'multiseries'
              isRequired: false
              default: 'true'

            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true

            - type: toggleButton
              displayName: 'Exogenous Variables'
              attributeName: 'exvar'
              isRequired: false
              default: 'true'
          
            - displayName: Days To Forecast
              attributeName: fcdays
              type: textBox
              enableIf: '{%- if not config.exvar %}true{%- else %}false{%- endif %}' 
              isRequired: false
              default: '30'

        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {{ stage('Create Forecast Table') }}


            CREATE OR REPLACE TABLE {{ this }}
            (
                {% for col in source.columns  %}
                    "{{ col.name }}" 
                    {%- if col.name == config.tscol.name %} TIMESTAMP 
                    {%- elif col.name == config.tgtcol.name %} FLOAT 
                    {%- else %} {{ col.dataType }}
                    {%- endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


        run:
          templateString: |+
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {{ stage('Truncate Forecast table') }}
            TRUNCATE IF EXISTS {{ this }}

            {{ stage('Populate Forecast Table with Historical Data') }}

            INSERT INTO {{ this }}
            (
                {%- for col in source.columns  %} 
                    "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
            )
            SELECT 
                {% for col in source.columns  %} 
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            {{ source.join }}

            {{ stage('Create Forecast Model Instance') }}

            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
            )


            {{ stage('Insert Forecast data') }}
            BEGIN

            {% if config.exvar %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NULL
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' );

                UPDATE {{ this }} SRC
                SET 
                    {%- for col in columns if  col.forecast or col.lower_bound or col.upper_bound %}
                        "{{ col.name }}" = RES."{{ col.name }}" {%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES
                WHERE 
                    RES."TS" = SRC."{{ config.tscol.name }}"
                    {%- if config.multiseries  %}
                    AND RES."SERIES" = SRC."{{ config.seriescol.name }}"            
                    {%- endif %};

            {% else %}

                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST({{ config.fcdays }});

                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
            	        {%- elif col.id == config.tscol.id %}"TS"
            	        {%- elif col.id == config.tgtcol.id %}NULL
            	        {%- elif col.forecast or col.lower_bound or col.upper_bound %}"{{ col.name }}"
            	        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
            	        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;
            {% endif %}


            END


    name: ML Forecast
    version: 1
  StepType-2:
    id: "2"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: CDC Table
        short: "CDC"
        tagColor: "#FF33CC"
        plural: CDC Tables
        config:
        - groupName: Stream
          items:
          - displayName: Description
            attributename: description
            type: textBox
            isRequired: false
            default: "A CDC table consists of a few components:\n
              1. A stream on the source node\n
              2. The CDC table which contains a persistent replica of recent CDC records\n
              3. A sequence to keep track of streams\n
              4. Optional: a Task to replicate records from the Stream into the CDC table\n
              "
        - groupName: Task
          items:
          - displayName: Create Task
            enableIf: {{config.cdcTableEnabled}}
            attributeName: taskEnabled
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Task Schedule
            enableIf: "{{config.taskEnabled}}"
            attributeName: taskSchedule
            type: dropdownSelector
            default: "Every 30 minutes"
            options:
            - "Every minute"
            - "Every 5 minutes"
            - "Every 30 minutes"
            - "Every hour"
            - "Every day"
            - Every week
            - Every Month
            isRequired: false
            
          - displayName: Warehouse
            enableIf: "{{config.taskEnabled}}"
            attributeName: taskWarehouse
            type: dropdownSelector
            default: "COMPUTE_WH"
            options:
            - "COMPUTE_WH"
            isRequired: false
          - displayName: Custom Task Name
            enableIf: "{{config.taskEnabled}}"
            attributeName: taskCustomName
            type: textBox
            isRequired: false
        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: false
        systemColumns:
        - displayName: "METADATA$ACTION"
          transform: "METADATA$ACTION"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataAction
          description: Indicates the DML operation (INSERT, DELETE) recorded.
        - displayName: "METADATA$ISUPDATE"
          transform: "METADATA$ISUPDATE"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataIsUpdate
          description: Indicates whether the operation was part of an UPDATE statement.
        - displayName: "METADATA$ROW_ID"
          transform: "METADATA$ROW_ID"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataRowId
          description: Specifies the unique and immutable ID for the row, which can be used to track changes to specific rows over time.
        - displayName: "CDC_ID"
          transform: ""
          dataType: INTEGER
          placement: end
          attributeName: isStreamMetadataCDCId
          description: Medtronic specific CDC identifier based on a sequence.
        - displayName: "CDC_TIMESTAMP"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate
          description: Medtronic specific attribute containing the timestamp of storing the CDC record.
      templates:
        create:
          templateString: |-
            {{ stage('Create Stream') }}
            CREATE OR REPLACE STREAM {{ ref_no_link(node.location.name, "STR_" + node.name) }}
            ON TABLE {{ ref(sources[0].dependencies[0].node.location.name, sources[0].dependencies[0].node.name) }}
            APPEND_ONLY = FALSE SHOW_INITIAL_ROWS = TRUE
            COMMENT = 'CDC Stream on {{ ref(node.location.name, sources[0].dependencies[0].node.name) }}'
            {{ stage('Create Sequence') }}
            CREATE OR REPLACE SEQUENCE {{ ref_no_link(node.location.name, "SEQ_" + node.name) }}
            {{ stage('Create CDC Table') }}
            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            {% if config.taskEnabled is true %}
                {{ stage('Create Task') }}
                CREATE OR REPLACE TASK
                {% if config.taskCustomName != '' %}
                    {{ ref_no_link(node.location.name, config.taskCustomName) }}
                {% else %}
                    {{ ref_no_link(node.location.name, "TSK_" + node.name) }}
                {% endif %}
                WAREHOUSE = {{config.taskWarehouse}}
                SCHEDULE =
                {% if config.taskSchedule == 'Every minute' %}
                    '1 MINUTE'
                {% elif config.taskSchedule == 'Every 5 minutes' %}
                    '5 MINUTE'
                {% elif config.taskSchedule == 'Every 30 minutes' %}
                    '30 MINUTE'
                {% elif config.taskSchedule == 'Every hour' %}
                    '60 MINUTE'
                {% elif config.taskSchedule == 'Every day' %}
                    '3600 MINUTE'
                {% else %}
                    'INVALID'
                {% endif %}
                COMMENT='Task to copy data of stream STR_{{node.name}} to CDC Table {{node.name}}'
                WHEN "SYSTEM$STREAM_HAS_DATA"('{{- ref_no_link(node.location.name, "STR_" + node.name) -}}')
                AS
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {% if col.name == 'CDC_ID' %}
                             {{ ref_no_link(node.location.name, "SEQ_" + node.name) }}.NEXTVAL
                        {% elif col.transform | trim != '' %}
                            {{ col.transform.replace(source.dependencies[0].node.name, 'STR_' + node.name) }}
                        {% elif col.sourceColumns[0].column and col.sourceColumns[0].column.name %}
                            "STR_{{ node.name }}"."{{ col.sourceColumns[0].column.name }}"
                        {% else %}
                            NULL
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    FROM {{ ref_no_link(node.location.name, "STR_" + node.name) }}
                    {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                        {{config.insertStrategy}}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: |-
            {% if config.taskEnabled is true %}
                {{ stage('Resume Task') }}
                ALTER TASK
                {% if config.taskCustomName != '' %}
                    {{ ref_no_link(node.location.name, config.taskCustomName) }}
                {% else %}
                    {{ ref_no_link(node.location.name, "TSK_" + node.name) }}
                {% endif %}
                RESUME
            {% else %}
                {{ stage('Insert From Stream') }}
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {% if col.name == 'CDC_ID' %}
                            {{ ref_no_link(node.location.name, "SEQ_" + node.name) }}.NEXTVAL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    FROM {{ ref_no_link(node.location.name, "STR_" + node.name) }} AS "{{ sources[0].dependencies[0].node.name }}"
                    {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                        {{config.insertStrategy}}
                    {% endif %}
                {% endfor %}
            {% endif %}
    name: CDC Table
    version: 1
  StepType-20:
    id: "20"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |-
        capitalized: PII View
        short: VPII
        tagColor: 'red'
        isDisabled: true
        plural: Views

        config:
          - groupName: Documentation
            items:
            - displayName: Description
              attributename: description
              type: textBox
              isRequired: false
              default: "A PII View adds a masking policy to specific attributes marked using the PII Flag column.  Allowed values (PII or blank)."

          - groupName: Options
            items: 

            - displayName: Masking policy name
              attributeName: maskingPolicy
              type: textBox
              isRequired: true

          - groupName: Hidden config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: view
              options:
              - view
              isRequired: true

        mappingColumns:                                  
        - type: textBox                                  
          headerName: 'PII Flag'                        
          attributeName: piiFlag
      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}
            {{ stage('Create View') }}
            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}"{%- if col.piiFlag | upper == "PII"%} MASKING POLICY "{{config.maskingPolicy}}" {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            AS

            SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
            {% for col in source.columns %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}

            {{ source.join }}


        run:
          templateString: ""
    name: PII View
    version: 1
  StepType-207:
    id: "207"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Snowpipe
        short: 'LOAD'
        tagColor: '#C39BD3'
        isDisabled: false
        plural: Snowpipe

        config:
        - groupName: File Location
          items: 

          - displayName: Stage
            attributeName: fileLocation
            type: dropdownSelector
            default: "DOUGS3/csv"
            options:
            - "DOUGS3/csv"
            - "Create external stages on Snowflake"
            - "Place them in the same storage location"
            - "List the storage locations in this dropdown"
            isRequired: true

          - displayName: File Pattern
            attributeName: filePattern
            type: textBox
            default: ".*[.]csv"
            isRequired: false

          - displayName: File Format
            attributeName: fileFormat
            type: dropdownSelector
            default: my_csv_format
            options:
            - my_csv_format
            isRequired: true

          - displayName: Auto Ingest
            attributeName: autoIngest
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Integration
            attributeName: inteGration
            type: dropdownSelector
            default: None
            options:
            - None
            - INTEGRATION
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: true

        systemColumns:
          
        - displayName: COL1
          attributeName: col1
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL2
          attributeName: col2
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL3
          attributeName: col3
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL4
          attributeName: col4
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL5
          attributeName: col5
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL6
          attributeName: col6
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL7
          attributeName: col7
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL8
          attributeName: col8
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL9
          attributeName: col9
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL10
          attributeName: col10
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL11
          attributeName: col11
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL12
          attributeName: col12
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL13
          attributeName: col13
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL14
          attributeName: col14
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL15
          attributeName: col15
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL16
          attributeName: col16
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL17
          attributeName: col17
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL18
          attributeName: col18
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL19
          attributeName: col19
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: COL20
          attributeName: col20
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: 'FILE_NAME'
          attributeName: fileName
          transform: ''
          dataType: STRING
          placement: beginning

        - displayName: 'FILE_ROW_NUMBER'
          attributeName: fileRN
          transform: ''
          dataType: STRING
          placement: beginning
      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}

            {{ stage('Create Landing table')}}
            CREATE OR REPLACE TABLE {{this}} 
            (
                {% for col in source.columns  %}
                  "{{ col.name }}" {{ col.dataType }} 
                  {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )

            {{ stage('Create Snowpipe') }}
            CREATE OR REPLACE PIPE  {{ this | replace (node.name, "PIPE_"+node.name) }}
              auto_ingest = true
              {% if config.inteGration != 'None'%}INTEGRATION = '{{config.inteGration}}'{% endif %}
            AS
              COPY INTO {{ this }} (
                {%- for col in columns  %}
                    "{{ col.name }}" 
                  {%- if not loop.last -%},{% endif %}
                {%- endfor %}
              )
              FROM ( 
                SELECT 
                {%- for col in source.columns  %}
                  {%- if col.fileName %} METADATA$FILENAME 
                  {%- elif col.fileRN %} METADATA$FILE_ROW_NUMBER
                  {%- else %}
                    t.${{loop.index}}::{{ col.dataType }}
                  {%- endif %}
                  {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                FROM  @{{parameters.stage_location}}.{{ config.fileLocation }}
                (FILE_FORMAT => '{{parameters.stage_location}}.{{ config.fileFormat }}') t 
              )
              {% if config.filePattern | length > 0 %}PATTERN = '{{ config.filePattern}}' {% endif %}

        run:
          templateString: |-
            {% set source = sources[0] %}
            {{ stage('Run Copy') }}

            COPY INTO {{ this }} (
                {%- for col in columns  %}
                    "{{ col.name }}" 
                  {%- if not loop.last -%},{% endif %}
                {%- endfor %}
              )
              FROM ( 
                  SELECT 
                  {%- for col in source.columns  %}
                    {%- if col.fileName %} METADATA$FILENAME 
                    {%- elif col.fileRN %} METADATA$FILE_ROW_NUMBER
                    {%- else %}
                      t.${{loop.index}}::{{ col.dataType }}
                    {%- endif %}
                    {%- if not loop.last -%}, {% endif %}
                  {%- endfor %}
                  FROM  @{{parameters.stage_location}}.{{ config.fileLocation }}
                  (FILE_FORMAT => '{{parameters.stage_location}}.{{ config.fileFormat }}') t 
                )
              PATTERN = '{{ config.filePattern}}'
    name: Snowpipe V2
    version: 1
  StepType-3:
    id: "3"
    isDisabled: true
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |-
        capitalized: MS Loop
        short: MSLOOP
        plural: MS Loop
        tagColor: 'black'
        config:
        - groupName: Additional Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true
          - type: multisourceToggle
            isRequired: false
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"
          - displayName: Insert Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            isRequired: true
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
        - groupName: Storage Location Query
          items:
          - displayName: Starts With
            attributeName: storageLocationSearchText
            type: textBox
            default: 'SOURCE'
            isRequired: true
        systemColumns:
        - displayName: "SOURCE"
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemSource
      templates:
        create:
          templateString: |-
            {% if node.override.create.enabled %}
                {{ node.override.create.script }}
            {% elif node.materializationType == 'table' %}
                {{ stage('Create Stage Table') }}
                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}
                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: |-
            {% if config.truncateBefore %}
                {{ stage('Truncate Stage Table') }}
                TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            {% endif %}
            {% for sourceMapping in storageLocations if sourceMapping.name.startswith(config.storageLocationSearchText) %}
                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ stage( config.insertStrategy + ' Sources' | string ) }}
                            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                        {% endif %}
                        {% for source in sources %}
                            {% if config.insertStrategy == 'INSERT' %}
                                {{ stage('Insert ' +  sourceMapping.name + '_' + source.name | string ) }}
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                            {% endif %}
                            SELECT
                            {% for col in source.columns %}
                                {% if col.isSystemSource %}
                                    '{{ sourceMapping.name }}'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                            FROM {{ ref(sourceMapping.name, sources[0].columns[0].sourceColumns[0].node.name )}}
                            {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                {{config.insertStrategy}}
                            {% endif %}
                        {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}
            {% endfor %}
    name: Multi-Source Loop
    version: 1
  StepType-4:
    id: "4"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: Stage Date
        short: DATE
        plural: Dates
        tagColor: 'black'
        config:
        - groupName: Date Options
          items:
          - displayName: Starting Date
            attributeName: startingDate
            type: textBox
            syntax: sql
            default: 'DATEADD(DAY, -730, CURRENT_DATE)'
          - displayName: Number of Days to Generate
            attributeName: daysToGenerate
            type: textBox
            default: '2000'
          - displayName: Generated Date Column Name
            attributeName: dateColumnName
            type: textBox
            default: '"DATE_COL"'
        - groupName: Additional Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true
          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            isRequired: true
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
        systemColumns:
        - displayName: DATE_KEY
          transform: '{{ config.dateColumnName }}'
          dataType: 'DATE'
          placement: beginning
          attributeName: isDate
        - displayName: 'YEAR'
          transform: 'YEAR({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isYear
        - displayName: 'MONTH'
          transform: 'MONTH({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isMonth
        - displayName: 'MONTH_NAME'
          transform: 'MONTHNAME({{ config.dateColumnName }})'
          dataType: CHAR(3)
          placement: beginning
          attributeName: isMonthName
        - displayName: 'DAY_OF_MONTH'
          transform: 'DAY({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isDayOfMonth
        - displayName: 'DAY_OF_WEEK'
          transform: 'DAYOFWEEK({{ config.dateColumnName }})'
          dataType: VARCHAR(9)
          placement: beginning
          attributeName: isDayOfWeek
        - displayName: 'WEEK_OF_YEAR'
          transform: 'WEEKOFYEAR({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isWeekOfYear
        - displayName: 'DAY_OF_YEAR'
          transform: 'DAYOFYEAR({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isYearColumn
        - displayName: 'QTR_OF_YEAR'
          transform: 'QUARTER({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isYearColumn
      templates:
        create:
          templateString: |-
            {{ stage('Create Stage Table') }}
                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}
            {% endif %}
            {% if config.truncateBefore %}
                {{ stage('Truncate Stage Table') }}
                TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            {% endif %}
            {{ stage('Insert ' + sources[0].name | string ) }}
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in sources[0].columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                WITH CTE_DATE_GENERATOR AS (
                    SELECT DATEADD(DAY, SEQ4(), {{config.startingDate }}) AS {{ config.dateColumnName }}
                    FROM TABLE(GENERATOR(ROWCOUNT=>{{ config.daysToGenerate }}))
                )
                SELECT
                {% for col in sources[0].columns %}
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                FROM CTE_DATE_GENERATOR
            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}
            {% endif %}
    name: Date Stage
    version: 1
  StepType-43:
    id: "43"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension with Zero Key
        short: DIM
        tagColor: 'blue'
        plural: Dimensions

        config:
        - groupName: Options
          items:

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: toggleButton
            attributeName: insertZeroKey
            displayName: Insert Zero Key Record
            default: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ this }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }} 
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            	{% if config.insertZeroKey %}

            		{{ stage('Insert Zero Record') }}
            		INSERT INTO {{ this }}
            		(SELECT 
            		{% for col in sources[0].columns %}
            			{% set dtparams = col.dataType.partition('(')[-1].rpartition(')')[0].split(',') %}
            			{% if col.isSurrogateKey %}0
            				{% elif col.isSystemCurrentFlag %}'Y'
            				{% elif col.isSystemStartDate or col.isSystemEndDate or col.isSystemUpdateDate or col.isSystemCreateDate %}{{ get_source_transform(col) }}
            				{% elif col.isSystemVersion%}1
            				{% elif col.dataType[:3] | upper in ('NUM','INT','DEC','FLO') %}0
            				{% elif col.dataType[:4] | upper in ('DATE','TIME') %}CAST('0001-01-01' AS {{ col.dataType }})
            				{% elif col.dataType[:3] | upper in ('VAR','CHA','STR','BIN') %}
            					{% if dtparams[0] and dtparams[0] | int < 7 %}
            						SUBSTRING('UNKNOWN',1,{{ dtparams[0] }})
            					{% else %}
            						'UNKNOWN'
            					{% endif %}
            				{% elif col.nullable %}NULL
            				{% else %}''
            			{% endif %}
            			AS "{{ col.name }}"
            			{% if not loop.last %}, {% endif %}
            		{% endfor %}
            		)
            	{% endif %}

            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ this }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension 0
    version: 1
  StepType-53:
    id: "53"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |
        capitalized: Data Store
        short: DS
        plural: Data Stores
        tagColor: '#29B2DB'

        config:
        - groupName: Documentation
          items:
          - displayName: Description
            attributename: description
            type: textBox
            isRequired: false
            default: "Data Store Node\n\n
              This is a persistent table that requires a business key or natural key\n
              in order to process create and process.  Changing attributes can optionally be \n
              selected to track changes with a new system_start_time.\n\n
              Note: Failing to select a business will cause an error on Create or Run\n
              "
        - groupName: Options
          items:
          
          - type: businessKeyColumns
            isRequired: false

          - type: changeTrackingColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |+
            {{ stage('Create Data Store Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Data Store
    version: 1
  StepType-61:
    id: "61"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Dynamic Table
        short: 'DYN'
        tagColor: '#C39BD3'
        isDisabled: false
        plural: External Tables

        deployStrategy: advanced

        config:
        - groupName: Options
          items: 
          - displayName: Lag
            attributeName: lagSchedule
            type: dropdownSelector
            default: "30 MINUTE"
            options:
            - "1 MINUTE"
            - "5 MINUTE"
            - "30 MINUTE"
            - "1 HOUR"
            - "1 DAY"
            isRequired: false
            
          - displayName: Warehouse
            attributeName: Warehouse
            type: dropdownSelector
            default: "COMPUTE_WH"
            options:
            - "COMPUTE_WH"
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: view
            options:
            - view
            isRequired: true
      templates:
        create:
          templateString: |-
            {% if desiredState == undefined %}
              {{ stage('Drop Dynamic Table') }}
              DROP DYNAMIC TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}

            {% else %}

              {{ stage('Create Dynamic Table') }}

              CREATE OR REPLACE DYNAMIC TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                LAG = '{{ desiredState.config.lagSchedule }}'
                WAREHOUSE = {{ desiredState.config.Warehouse }}
              AS
                SELECT
                  {% for col in desiredState.sources[0].columns %}
                      {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                  {% endfor %}
                {{ desiredState.sources[0].join }}
            ;
            {% endif %}
        run:
          templateString: ""
    name: Dynamic Table
    version: 1
  StepType-72:
    id: "72"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: EXCEL FILE
        short: XLSX
        plural: Excel Files
        tagColor: 'green'
        config:
        - groupName: Options
          items:

          - displayName: Stage
            attributeName: stage
            type: dropdownSelector
            default: "DOUGS32"
            options:
            - "DOUGS32"
            - "TPCH"
            - "RefData"
            - "Logs"
            isRequired: true

          - displayName: Filename
            attributeName: filename
            type: textBox
            default: Marketing.xlsx
            isRequired: true

          - displayName: Worksheet (empty will take the first sheet)
            attributeName: worksheet
            type: textBox
            isRequired: false

          - displayName: Number of rows to skip
            attributeName: skipRows
            default: "0"
            type: textBox
            isRequired: false
          
          - displayName: Columns to be used (eg. C:D)
            attributeName: useCols
            default: "A:E"
            type: textBox
            isRequired: false  

        systemColumns:
        - displayName: 'VALUE'
          attributeName: 'VALUE'
          transform: ''
          dataType: VARIANT
          placement: beginning
      templates:
        create:
          templateString: |-
            {{ stage('Create Python Procedure ') }}
            CREATE OR REPLACE PROCEDURE {{ ref_no_link(node.location.name, 'PROC_' + node.name | upper) | trim }}(INPUT_DESTINATION_TABLE STRING, SKIP_ROWS INT, USE_COLS STRING)
              returns string not null
              language python
              runtime_version = '3.8'
              packages = ('snowflake-snowpark-python', 'pandas', 'openpyxl') -- openpyxl required for pandas to read xlsx
              imports = ('@DOUG_DB.PUBLIC.{{ config.stage | upper | trim }}/{{ config.filename | trim }}')
              handler = 'leverage_external_mapping_file_py'
            as
            $$
            import pandas
            import sys
            from snowflake.snowpark.functions import sql_expr
            IMPORT_DIRECTORY_NAME = "snowflake_import_directory"
            import_dir = sys._xoptions[IMPORT_DIRECTORY_NAME]
            def leverage_external_mapping_file_py(snowpark_session, destination_table: str, skip_rows: int, use_cols: str):
              mapping_df_pd = pandas.read_excel(import_dir + '{{ config.filename }}'{% if config.worksheet %},sheet_name="{{ config.worksheet }}"{% endif %}{% if config.skipRows %}, skiprows=skip_rows{% endif %}{%if config.useCols %}, usecols=use_cols{% endif %})
              json = mapping_df_pd.to_json(orient="records")
              df = snowpark_session.create_dataframe([json]).to_df("value")
              df = df.withColumn("value",sql_expr("parse_json(value)"))
              df.write.mode("overwrite").save_as_table(destination_table)
              return json
            $$
        run:
          templateString: |-
            {{ stage('Run Stored Procedure') }}
            CALL {{ ref_no_link(node.location.name, 'PROC_' + node.name | upper) | trim }}(
                '{{ this }}'
                ,{% if config.skipRows %}{{ config.skipRows }}{% else %}NULL{% endif %}
                ,{% if config.useCols %}'{{ config.useCols }}'{% else %}NULL{% endif %}
            )
    name: Excel File
    version: 1
  StepType-80:
    id: "80"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: SQL
        short: SQL
        tagColor: gray
        plural: sql

        config: 
        - groupName: Options 
          items: 
          - type: materializationSelector
            options:
              - table
            default: table
            isRequired: true
            isEnabled: "false"

          - displayName: SQL
            attributeName: SQLstmt 
            type: textBox 
            syntax: sql 
            isRequired: true    
            default: "  CREATE OR REPLACE TABLE DB.SCHEMA.TEST AS \n
            SELECT 1 COL"
         
        systemColumns: 
        - displayName: SYSTEM_START_DATE 
          transform: CURRENT_TIMESTAMP
          dataType: TIMESTAMP 
          placement: beginning 
          attributeName: isSQL
         
        - displayName: SQL_STMT
          transform: ''
          dataType: VARCHAR 
          placement: end 
          attributeName: isSystemStartDate 
         
      templates:
        create:
          templateString: |-
            {{ stage('Create SQL Table') }}

            CREATE OR REPLACE TABLE {{ this }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }} 
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
        run:
          templateString: |-
            {% set sql = config.SQLstmt %}
            {% set sql_fix = sql | replace("'", "''") %}

            {{ stage('Insert SQL') }} 
            INSERT INTO {{ this }} (SYSTEM_START_DATE, SQL_STMT) 
            SELECT CURRENT_TIMESTAMP, '{{ sql_fix }}'; 

            {{ stage('Run SQL') }}
            {{ sql }}
    name: SQL
    version: 1
  StepType-81:
    id: "81"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |+
        capitalized: Aggregate View
        short: VAGG
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 

            - displayName: COUNT DISTINCT
              type: columnSelector
              attributeName: isCountDistinct
              isRequired: false

            - displayName: SUM
              type: columnSelector
              attributeName: isSum
              isRequired: false
            
            - displayName: MIN
              type: columnSelector
              attributeName: isMin
              isRequired: false

            - displayName: MAX
              type: columnSelector
              attributeName: isMax
              isRequired: false

            - displayName: AVG
              type: columnSelector
              attributeName: isAvg
              isRequired: false

            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true
              enableIf: "false"

        systemColumns: 
        - displayName: RECORD_COUNT 
          transform: COUNT(*)
          dataType: INTEGER
          placement: end 
          attributeName: isCount

      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}
            {{ stage('Create View') }}
            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                SELECT 
                    {% for col in source.columns %}
                        {% if col.isSum  %}
                            SUM({{ get_source_transform(col) }})
                        {% elif col.isCountDistinct %}
                            COUNT(DISTINCT {{ get_source_transform(col) }})
                        {% elif col.isMin %}
                             MIN({{ get_source_transform(col) }})
                        {% elif col.isMax %}
                            MAX({{ get_source_transform(col) }})
                        {% elif col.isAvg %}
                            AVG({{ get_source_transform(col) }})
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                {{ source.join }}
                GROUP BY 
                    {% for col in source.columns if not col.isSum and not col.isMin and not col.isMax and not col.isAvg and not col.isCountDistinct and not col.isCount -%}
                        {{ get_source_transform(col) }} {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

        run:
          templateString: ""
    name: Aggregate View
    version: 1
  StepType-85:
    id: "85"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: Snowpipe
        short: 'LOAD'
        tagColor: '#C39BD3'
        isDisabled: false
        plural: Snowpipe

        config:
        - groupName: File Location
          items: 

          - displayName: Stage
            attributeName: fileLocation
            type: dropdownSelector
            default: "DOUGS32"
            options:
            - "DOUGS32"
            - "Create external stages on Snowflake"
            - "Place them in the same storage location"
            - "List the storage locations in this dropdown"
            isRequired: true

          - displayName: File Pattern
            attributeName: filePattern
            type: textBox
            default: ".*[.]json"
            isRequired: true

        - groupName: File Format 
          items:
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: JSON
            options:
            - "CSV"
            - "JSON"
            - "Parquet"
            isRequired: true

          - displayName: Compression
            attributeName: compression
            enableIf: "{{ config.fileType in ['CSV','JSON'] }}" 
            type: dropdownSelector
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Additional Options
          items:
          - displayName: Auto Ingest
            attributeName: autoIngest
            type: toggleButton
            default: true
            isRequired: false

          - displayName: AWS SNS Topic
            attributeName: snsTopic
            type: textBox
            enableIf: "{{ config.autoIngest }}"
            default: "arn:aws:sns:us-east-1:121674918127:prod-emea-s3-notification"
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: true

        systemColumns:

        - displayName: 'VALUE'
          attributeName: 'VALUE'
          transform: ''
          dataType: VARIANT
          placement: beginning
        - displayName: 'METADATA$FILENAME'
          attributeName: 'METADATA$FILENAME'
          transform: ''
          dataType: STRING
          placement: end
      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}

            {{ stage('Create Landing table')}}
            CREATE OR REPLACE TABLE {{this}}
              {% if config.fileType == "CSV" %}
                {% for col in source.columns if (col.name | upper != "VALUE" and col.name | upper != "METADATA$FILENAME") %}
                  {% if loop.first %}({% endif %}
                    "{{ col.name }}" {{ col.dataType }} AS (value:c{{ loop.index }}::{{ col.dataType }})
                  {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                  {%- if not loop.last -%}, {% else %}){% endif %}
                {% endfor %}
              {% endif %}
              {% for col in source.columns if (col.name | upper == "VALUE" or col.name | upper == "METADATA$FILENAME") %}
                {% if loop.first %}({% endif %}
                  "{{ col.name }}" {{ col.dataType }} 
                {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                {%- if not loop.last -%}, {% else %}){% endif %}
              {% endfor %}

            {{ stage('Create Snowpipe') }}
            CREATE OR REPLACE PIPE  {{ this | replace (node.name, "PIPE_"+node.name) }}
              auto_ingest = true
              
            AS
              COPY INTO {{ this }} (VALUE)
              FROM  @{{parameters.stage_location}}.{{ config.fileLocation | upper  }}
              FILE_FORMAT = (TYPE = '{{ config.fileType }}');

        run:
          templateString: ""
    name: Snowpipe
    version: 1
  StepType-9:
    id: "9"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite User-Defined
        short: 'SAT'
        plural: 'Satellites'
        tagColor: 'yellow'

        config:
        - groupName: Options
          items:
          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: true

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
          
          
      templates:
        create:
          templateString: |

            {{ stage('Create Satellite Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}

            	{{ stage('Insert New Rows') }}
            	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            	WITH "SAT_CURR_ROWS" AS (
            		/* get current rows from satellite */
            		{% for col in columns if col.isHubHash or col.isChangeHash %}
            			{%- if loop.first -%}SELECT {% endif %} 
            			{{col.name}}
            			{%- if not loop.last -%}, {% endif %}
            			{%- if loop.last %} 
            				FROM {{ ref_no_link(node.location.name, node.name) }} 
            				QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isHubHash") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
            			{% endif %}
            		{% endfor %}
            	)

            		{% for source in sources %}
            			SELECT DISTINCT
            			{% for col in source.columns %}
            				{{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}

            			{{ source.join }}
            		WHERE NOT EXISTS(
            			SELECT 1 FROM "SAT_CURR_ROWS"
            			WHERE 
            			{% for col in source.columns if col.isHubHash or col.isChangeHash %}
            				{% if not loop.first %}
            					AND
            				{% endif %}
            				{{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
            			{% endfor %}
            		)

            		{% endfor %}

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}

            {% endif %}
    name: Satellite
    version: 1
  StepType-98:
    id: "98"
    isDisabled: true
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Copy Into
        short: 'COPY'
        tagColor: '#6ca37b'
        isDisabled: false
        plural: Copy Into
        config:
        - groupName: Source Data
          items:
          - displayName: Stage Name
            attributeName: stageName
            type: textBox
            default: 'DOUGS32'
            isRequired: true

          - displayName: File Name(s) (Optional - Use single quotes and commas)
            attributeName: fileNames
            type: textBox
            isRequired: false

          - displayName: File Pattern (Optional - Use single quotes)
            attributeName: filePattern
            type: textBox
            isRequired: false

        - groupName: File Format
          items:
          - displayName: File Format Definition
            attributeName: fileFormatType
            type: dropdownSelector
            default: "File Format Name"
            options:
            - File Format Name
            - File Format Values
          - displayName: File Format Name
            attributeName: fileFormatName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.fileFormatType == 'File Format Name' %} true {% else %} false {% endif %}"
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: CSV
            options:
            - "CSV"
            - "PARQUET"
            - "JSON"
            - "AVRO"
            - "ORC"
            - "XML"
            isRequired: false
            enableIf: "{% if config.fileFormatType != 'File Format Name' %} true {% else %} false {% endif %}"
          - displayName: Compression
            attributeName: compression
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV','JSON')) %} true {% else %} false {% endif %}"
            type: dropdownSelector
            default: "AUTO"
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false
          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\n"
            isRequired: false
          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: ","
            isRequired: false
          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\\042"
            isRequired: false
          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "1"
            isRequired: false
          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false
          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false
        - groupName: Copy Options
          items:
          - displayName: Truncate Target Flag
            attributeName: truncateTargetFlag
            type: toggleButton
            isRequired: true
            default: false
          - displayName: On Error Behavior
            attributeName: onError
            type: dropdownSelector
            options:
            - "CONTINUE"
            - "SKIP_FILE"
            - "SKIP_FILE_<num>"
            - "SKIP_FILE_<num>%"
            - "ABORT_STATEMENT"
            isRequired: false
          - displayName: Size Limit
            attributeName: sizeLimit
            type: textBox
            isRequired: false
          - displayName: Purge Behavior
            attributeName: purgeBehavior
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Return Failed Only
            attributeName: returnFailedOnly
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Match By Column Name
            attributeName: matchByColumnName
            type: dropdownSelector
            default: NONE
            options:
            - "CASE_SENSITIVE"
            - "CASE_INSENSITIVE"
            - "NONE"
            isRequired: false
            enableIf: "{% if config.fileType in ('JSON','AVRO','ORC','PARQUET') %} true {% else %} false {% endif %}"
          - displayName: Enforce Length
            attributeName: enforceLength
            type: dropdownSelector
            default: TRUE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Truncate Columns
            attributeName: truncateColumns
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Force
            attributeName: forceLoad
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Load Uncertain Files
            attributeName: loadUncertainFiles
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
      templates:
        create:
          templateString: |
            { stage('Create Table') }}
            CREATE OR REPLACE TABLE {{this}} (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                {%- if col.Description | length > 0 %} COMMENT '{{ col.Description }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
            )
        run:
          templateString: |-
            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}


            {%- if config.filePattern | length > 0 -%} 
                {%- set filePatternSQL = 'PATTERN = ' + config.filePattern -%} 
            {%- else -%}
                {%- set filePatternSQL = "" -%} 
            {%- endif -%}

            {%- if config.fileNames | length > 0 %} 
                {% set fileNameSQL = 'FILES = (' + config.fileNames + ')' %} 
            {%- else -%}
                {% set fileNameSQL = "" %} 
            {% endif %}

            {{ stage('Copy Into') }}
                COPY INTO {{this}} (
                    {%- for col in columns %}
                        "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                FROM (SELECT
                    {%- for col in sources[0].columns %}
                        {{ col.transform }}
                    {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                     FROM '@{{parameters.stage_location}}.{{ config.stageName }}') 
                {{- fileNameSQL }}
                {{ filePatternSQL }}
                FILE_FORMAT = (FORMAT_NAME = '{{ db }}.{{ sch }}.{{ config.fileFormatName}}')
    name: Copy Into
    version: 1
  StepType-99:
    id: "99"
    isDisabled: true
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Task DAG Create Root
        short: TGCR
        tagColor: red
        plural: None

        deployStrategy: advanced

        config: 
        - groupName: Sceduling Options
          items:
          - displayName: Sceduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Root task SQL
            attributeName: tskSql
            type: textBox
            default: 'select current_timestamp()'
            isRequired: true
      templates:
        create:
          templateString: |+
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}

            {# Target Task Info #}
            {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
            {% set taskName =desiredState.node.name %}
            {%- set fqTaskName = tgtDb + '.' + tgtSch + '."' + taskName + '"' -%} 

            {# Task Type #}
            {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
            {%- else -%}
                {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
            {%- endif -%}

            {# Schedule Type #}
            {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                {%- set whenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
            {% else %}
                {%- set whenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON %}
            {% endif %}

            {{ stage('Suspend Root Task') }}
            ALTER TASK IF EXISTS {{ fqTaskName }} SUSPEND

            {{ stage('Create Task') }}
            CREATE OR REPLACE TASK 
                    {{ fqTaskName }} 
                    {{ taskType}} 
                    {{ whenRun }} 
                AS 
            {{desiredState.config.tskSql }} 

            {{ stage('Try Enable Root Task') }}
            begin
                let sqlDml := 'select system$task_dependents_enable(''{{fqTaskName}}'')';
                execute immediate sqlDml;
                return 'Task resumed';
                    exception
                    when statement_error then
                        return 'Task already running';
            end;

            {% elif desiredState == undefined %}

            {% set tgtDb = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
            {% set taskName =currentState.node.name %}
            {%- set fqTaskName = tgtDb + '.' + tgtSch + '."' + taskName + '"' -%} 

            {{ stage('Suspend Root Task') }}
                ALTER TASK IF EXISTS {{ fqTaskName }} SUSPEND
            {{ stage('Drop Current Task Task') }}
                DROP TASK IF EXISTS {{ fqTaskName }} 

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}

        run:
          templateString: ""
    name: Task DAG Create Root
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-105:
    id: "105"
    name: Customer
    steps:
      - 04125dff-891c-466a-b9a1-9e9525426d4a
      - 12be9651-24ba-4f76-9010-dc1f1ebb35a4
      - b5f82f01-75b2-4371-83b2-16ef30b050af
      - df9d3e39-a2eb-4c23-8e93-137ba9daeebd
      - e6c0e051-5b41-4bf5-8606-43329da81810
      - de9ae52e-a9a2-4b2e-bef7-8bbcf27d9754
      - f923ca3e-1b50-42f5-ac34-1e8b5b3015e7
      - b745c923-977d-45b8-9fa1-1ae30477fe35
  Subgraph-118:
    id: "118"
    name: New Subgraph
    steps:
      - 786e9e60-f128-48f9-a556-b87230d890b8
  Subgraph-121:
    id: "121"
    name: Opportunity
    steps:
      - 0ac6465e-9a84-4e17-999e-f3a16d2f40d1
      - 0c63b69b-2c0c-4f2a-bd14-d18756f6e942
      - 1e7deeac-e752-4546-908e-cddde9033aa1
      - 310a703c-a7a8-4565-8171-d0d04dd741c9
      - 33c4d7ba-122d-4c08-8fee-088d42cefb37
      - 4108c609-276b-4bc6-a0a1-37229843ba53
      - 416f8116-39df-493d-8779-5f05512600ae
      - 41dc6cc4-43a0-49ea-85bf-838180756ce6
      - 44622751-08c3-4ba4-8eee-823c81525761
      - 51bbbfae-c22f-4ea9-ba62-5067570a6fb6
      - 592afa23-af1a-41b0-a239-06801d02d3e4
      - 87c08224-2455-4b17-b493-83876e56491e
      - 9ee29abe-1280-4f02-aa25-6956015b74e8
      - ada44ece-5e88-47fc-95ca-3343d6da78f3
      - b026903a-da37-4bcd-83a0-fb949bfebe5e
      - c1ef0dab-6e63-48fe-9a9b-07241eaeb07f
      - c4d920c2-e94b-4d0c-9812-315b47ceed15
      - d647d09e-d143-4d83-b592-01bed0860ee1
      - df17cb43-eb21-48c0-b3cd-30967973c80b
      - e7773c12-5b5a-401a-bc93-981fcf13ef27
      - eb165e02-985b-424c-b489-8a80e709b28c
      - f6e3e123-6e6e-4551-a020-914e129774fc
      - ff0d2bd2-cd47-4007-98ac-450c7081e247
version: 2
