{{ stage('Create Table') }}
CREATE OR REPLACE TABLE {{ this }}
	(
		{% for col in columns %}
			"{{ col.name }}" {{ col.dataType }}
			{% if col.isSurrogateKey %}
		        identity
			{% endif %}
			{%- if not col.nullable %} NOT NULL
				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
			{% endif %}
			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
			{%- if not loop.last -%}, {% endif %}
		{% endfor %}
	)
	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}



{{ stage('Create Python Procedure ') }}
CREATE OR REPLACE PROCEDURE {{ ref_no_link(node.location.name, 'PROC_' + node.name | upper) | trim }}()
RETURNS STRING
language python
runtime_version=3.8
handler = 'call_api'
external_access_integrations=(COALESCE_API_INTEGRATION)
packages = ('snowflake-snowpark-python','requests','pandas')
as 
$$
import _snowflake
import requests
import json
from snowflake.snowpark.functions import sql_expr
from snowflake.snowpark.functions import lit 

def call_api(snowpark_session):
	h = json.loads('''{{config.headers}}''')
	{% if config.payload != None and config.payload != "" %}p = json.loads('''{{config.payload}}'''){% endif%}
	uri = '''{{config.uri}}'''
	response = requests.{{ config.method }}(uri, headers=h {%- if config.payload != None and config.payload != ""%}, payload=p {%- endif%})
	data = response.text
	df = snowpark_session.create_dataframe([data]).to_df("RESPONSE")
	df = df.withColumn("RESPONSE",sql_expr("parse_json(RESPONSE)"))
	df = df.with_column('URI', lit(uri))
	df.write.mode("overwrite").save_as_table('{{this}}')
	return str(data)
$$;