{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : PIVOT NODE == #}
{# == Node Type Description    : This node transforms a narrow table to wider table.It is particularly useful when you want to convert unique row values from one column into multiple columns in the output, aggregating data in the process == #}
{#Release date:20250107 Version:1.0.0#}
{#Release date:20250116 Version:2.0.1 Released By:AS  Description: Fix for insert query failure #}
{#Release date:20250122 Version:3.0.0 Released By:AS  Description: Deployment and Redeployment changes for Pivot node #}

{% if desiredState == currentState %}

{{ stage('Nothing to do.') }}
select 1 = 0

{% elif desiredState == undefined %}

    {# Table or View Name #}
    {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
    
    {% if currentState.node.materializationType == 'view' %}

     {{ stage('Drop Table or View', true, "sql", "drop") }}
     DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

    {% else %}
     
       {{ stage('Drop ' + currentState.node.materializationType , true, "sql", "drop") }}
       DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

    {% endif %}

{% elif currentState == undefined or (currentState != undefined and desiredState != currentState) %} 

              {%if currentState != undefined %}
                 {%if currentState.node.materializationType != desiredState.node.materializationType %}

                     {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}

                     {% if currentState.node.materializationType == 'view' %} 
                      DROP {{currentState.node.materializationType}} IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                     {% else %}
                      DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                     {% endif %}
                 {%endif%}
               {%endif%}

         {% set source = desiredState.sources[0] %}
         {%- set ns = namespace(keycol = "",pcolumn = [],saggfunctions=[],mggfunctions=[],funcdesc='',filcolval =[],cnt =1,i=0,exclclause =[],fexclclause ="",filcol =[]) %}


     {# Infer Pivot true #}
     {%if desiredState.config.inferPivot == true %}
			          {%set ns.keycol = desiredState.config.tabKeyColumn.get('items') | map(attribute='keyColDropdown.name') | list|first%}
                  {%set ns.pcolumn = desiredState.config.tabValueColumn.get('items') | map(attribute='valColDropdown.name') | list%}
                  {%if ns.keycol == null or ns.pcolumn == [] %}                    
                       {%set ns.keycol = desiredState.config.tabKeyColumn.get('items') | map(attribute='keyColTextBox') | list|first%}
                        {%set ns.pcolumn = desiredState.config.tabValueColumn.get('items') | map(attribute='valColTextBox')|list%}
                  {%endif%}
      {%else%}
			         {%set ns.keycol = desiredState.config.tabKeyColumn.get('items') | map(attribute='keyColTextBox') | list|first%}
                  {%set ns.pcolumn = desiredState.config.tabValueColumn.get('items') | map(attribute='valColTextBox')|list%}
      {%endif%}

         {# List of columns to be excluded from Pivot query#}
        {%if desiredState.config.excolval == true%}
         {%if desiredState.config.inferPivot == true and (desiredState.config.exlcol.get('items') | map(attribute='exclcol1') | list|first != None) %}

            {% set exclcol = desiredState.config.exlcol.get('items') | map(attribute='exclcol1.name') | list%} 
            {%for col in exclcol%}
              {%set ns.exclclause = ns.exclclause + ['"'+col+'"'] %}
            {%endfor%}
            {%set ns.fexclclause = 'EXCLUDE('+ ns.exclclause | join(',') + ')' %}
         {%else%}
             
             {% set exclcol = desiredState.config.exlcol.get('items') | map(attribute='exclcoltxtBox') | list%} 

            {%for col in exclcol%}
              {%set ns.exclclause = ns.exclclause + ['"'+col+'"'] %}
            {%endfor%}
            {%set ns.fexclclause = 'EXCLUDE('+ ns.exclclause | join(',') + ')' %}

         {%endif%}
         {%endif%}

         
   {%if desiredState.config.inferPivot == true or desiredState.node.materializationType == 'view' %}
      {%if desiredState.config.sincol == true %}

        {% set ns.saggfunctions = desiredState.config.aggfunc1.get('items') | map(attribute='funcname1') | list%}
         
         
        {{ stage('Create Pivot '+ desiredState.node.materializationType) }}

            CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
              AS
             ( {%for func in ns.saggfunctions%}
               {%if func == 'SUM'%} 
                 {%set ns.funcdesc = "TOTAL "+ ns.pcolumn|first %}
               {%elif func == 'AVG'%}
                 {%set ns.funcdesc = "AVERAGE "+ ns.pcolumn|first%}
               {%elif func == 'MAX'%}
                 {%set ns.funcdesc = "MAXIMUM "+ ns.pcolumn|first%}
               {%elif func == 'MIN'%}
                 {%set ns.funcdesc = "MINIMUM "+ ns.pcolumn|first%}
               {%elif func == 'COUNT'%}
                 {%set ns.funcdesc = "COUNT OF "+ ns.pcolumn|first%}
               {%elif func == 'MODE'%}
                 {%set ns.funcdesc = "MODE OF "+ ns.pcolumn|first%}
               {%elif func == 'MEDIAN'%}
                 {%set ns.funcdesc = "MEDIAN OF "+ ns.pcolumn|first%}
                {%endif%}
                SELECT * FROM (
                SELECT  * {%if ns.fexclclause != "" %} {{ ns.fexclclause}} {%endif%} {%if ns.saggfunctions | length >1 %},'{{ns.funcdesc}}' AS aggregate {%endif%}   
                 {{ source.join }} )
              PIVOT({{func}}({{ns.pcolumn|first}}) FOR {{ns.keycol}} IN ( {%if desiredState.config.subqueryval1 !="" %}
                 {{desiredState.config.subqueryval1}}
                {%elif desiredState.config.Colvol1 != "" %}
                   {{desiredState.config.Colvol1}}  
                {%else%}
                ANY ORDER BY {{ns.keycol}}
                {%endif%})
                {%if desiredState.config.defvalue == true%} DEFAULT ON NULL ({{desiredState.config.defaultval}}) {%endif%}
                ) 
                {%- if not loop.last -%} UNION {% endif %}
                {%endfor%}
                )
        {%else %}
        
           {# Multiple Pivot Columns#}
            {% set ns.mggfunctions = desiredState.config.tabValueColumn.get('items') | map(attribute='funcname') | list%}

           {#Filter column list#}
              
           {%if desiredState.config.samKeyColval == true%} 
               {%for col in ns.pcolumn%}
                  {%set ns.filcol = ns.filcol + [desiredState.config.Colvol1] %}
               {%endfor%}

            {%else%}
                {%set ns.filcol = desiredState.config.tabValueColumn.get('items') | map(attribute='Colvol') | list%}
            {%endif%}
            
           {# Filter columns need to be explicitly specified for Multiple Pivot Columns#}
                           
            {{ stage('Create Pivot '+ desiredState.node.materializationType) }}             
              
              
            CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
              AS
             ( 
                SELECT 
                {%for func in ns.mggfunctions %}
                       {%for val1 in ns.filcol[ns.i].split(',') %}
                        {% set val = val1.strip() %}
                      {{func}}(${{ns.cnt}}) AS {{func}}_{{val.replace("'", "")}}_{{ns.pcolumn[ns.i]}}
                      {%set ns.cnt = ns.cnt +1%}
                      {%if not loop.last %},{%endif%}
				           {%endfor%}
                   {%set ns.i = ns.i+1%}
                   {%if not loop.last%},{%endif%}
                {%endfor%}
                 FROM
              (SELECT
              {%for col in ns.pcolumn%}
                 {{col}},
                 {{ns.keycol}} AS {{ns.keycol}}_{{col}}
                 {%if not loop.last%},{%endif%}
              {%endfor%}
              {{ source.join }})
              {%for col in ns.pcolumn%} 
                PIVOT({{ns.mggfunctions[loop.index0]}}({{col}}) FOR {{ns.keycol}}_{{col}} IN ( 
                {%if ns.filcol[loop.index0] != None %}
                   {{ns.filcol[loop.index0]}}  
                {%else%}
                   ANY ORDER BY {{ns.keycol}}
                {%endif%}){%if desiredState.config.defvalue == true%} DEFAULT ON NULL ({{desiredState.config.defaultval}}) {%endif%})
			      {%endfor%}
                )
         
           {%endif%}
        {%elif desiredState.config.inferPivot == false and desiredState.node.materializationType != 'view' %}     
      
           {% if currentState == undefined or (currentState != undefined and currentState.node.materializationType != desiredState.node.materializationType)  %}
               {{ stage('Create Pivot '+ ' {{desiredState.node.materializationType}}' , true, "sql", "create") }}
               CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
              (
                {% for col in desiredState.columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
               )
              {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
           {% endif %}
  
          {% if currentState != undefined%}
		 
            {# Change Node Name or Change Storage Location #}
            {# Storage Location Tests #}

            {% set nsVariables = namespace(storageLocationTest=true) %}

            {# Test  #}
            {%if currentState.storageLocations|length == 0%}          
              {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | string %}
              {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | string %}
               {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
               
            {%else %}   
            {# Current target node mappings #}
            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | first %}
            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | first %}
            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}  
			 {% endif %}		 
        
            {# Desired target node mappings #}
            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='database') | first %}
            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='schema') | first %}
            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}           
            
             {% if currentDatabaseSchema != desiredDatabaseSchema %}
                {% set nsVariables.storageLocationTest = false %}
             {% endif %}
			 
           {# Rename / Move Object #}
            {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                {% set srcSchName = currentState.node.location.name %}
                {% set cdb = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
                {% set csch = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}

                ALTER TABLE  "{{cdb}}"."{{csch}}"."{{currentState.node.name}}"
                RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            {% endif %}

            {# Change table description #}
            {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                 {{ stage('Change table description', true, "sql", "alter") }}
                 ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                SET COMMENT = '{{ desiredState.node.description | escape }}'
            {% endif %}

            {# Drop Columns #}
            {% set nsVariables = namespace(colchanges=0) %}
            {% for dropCurCol in currentState.columns %}
                {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                    {% if nsVariables.colchanges == 1 %}
                        {{ stage('Drop Columns', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        DROP COLUMN 
                    {% else %}
                        , 
                    {% endif %}
                    "{{ dropCurCol.name }}"
                {% endif %}
            {% endfor %}

            {# Add Columns #}
            {% set nsVariables = namespace(colchanges=0) %}
            {% for addDesCol in desiredState.columns %}
                {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                    {% if nsVariables.colchanges == 1 %}
                        {{ stage('Add Columns', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        ADD COLUMN
                    {% else %}
                        ,
                    {% endif %}
                        "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                        {%- if not addDesCol.nullable %} NOT NULL
                            {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                {% endif %}
            {% endfor %}

            {# Rename Columns #}
            {% for renameCurCol in currentState.columns %}
                {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                    {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                    {% if renameCurCol.name != desiredColumnName %}
                        {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        RENAME COLUMN "{{ renameCurCol.name }}"
                        TO "{{ desiredColumnName }}"
                    {% endif %}
                {% endif %}
            {% endfor %}

            {# Change data types etc #}
            {% set nsVariables.colchanges = 0 %}
            {% for alterCurCol in currentState.columns %}        
                {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                    {% set currentDatatype = alterCurCol.dataType %}
                    {% set currentNullable = alterCurCol.nullable %}
                    {% set currentDefaultValue = alterCurCol.defaultValue %}
                    {% set currentDescription = alterCurCol.description %}

                    {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                    {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                    {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                    {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                    {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                    {% set datatypeTest = currentDatatype == desiredDatatype %}
                    {% set nullableTest = currentNullable == desiredNullable %}
                    {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                    {% set descriptionTest = currentDescription == desiredDescription %}

                    {% if (datatypeTest == false or 
                            nullableTest == false  or
                            defaultValueTest == false or
                            descriptionTest == false) %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                        {% if nsVariables.colchanges == 1 %}
                            {{ stage('Change Column Attributes', true, "sql", "alter") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            MODIFY
                        {% endif %}
                        {% if datatypeTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            SET DATA TYPE {{ desiredDatatype }}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        {% if nullableTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            {% if currentNullable == true %}
                                SET
                            {% else %}
                                DROP
                            {% endif %}
                            NOT NULL
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        {% if descriptionTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            COMMENT '{{ desiredDescription |escape }}'
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        {% if defaultValueTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            {% if desiredDefaultValue == '' %}
                                DROP DEFAULT
                            {% else %}
                                SET DEFAULT {{ desiredDefaultValue }}
                            {% endif %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        
                    {% else %}
                                            
                    {% endif %}
                {% endif %}
            {% endfor %}
			
         {%endif%}    
      {%endif%}

{%- else -%}

{{ stage('Nothing to do.') }}
select 1 = 0

{% endif %}