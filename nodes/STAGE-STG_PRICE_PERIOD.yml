fileVersion: 1
id: 7ce2e228-e8bb-449a-ab1e-3ed108ed4320
name: STG_PRICE_PERIOD
operation:
  config:
    insertStrategy: UNION
    postSQL: null
    preSQL: null
    selectDistinct: false
    testsEnabled: false
    truncateBefore: true
  database: ""
  deployEnabled: true
  description: Change
  isMultisource: false
  locationName: STAGE
  materializationType: table
  metadata:
    appliedNodeTests: []
    columns:
      - appliedColumnTests: {}
        columnReference:
          columnCounter: fedcca57-73c4-4e08-8767-b367d4d80982
          stepCounter: 7ce2e228-e8bb-449a-ab1e-3ed108ed4320
        config: {}
        dataType: VARCHAR(64)
        description: ""
        hashDetails: null
        name: ZONE_GEOGRAPHY
        nullable: true
        sourceColumnReferences:
          - columnReferences:
              - columnCounter: bcc39867-91fa-4c55-a8aa-68037cfef00d
                stepCounter: 60485eef-5f0f-4e58-88de-e60de6bdd818
            transform: ""
      - appliedColumnTests: {}
        columnReference:
          columnCounter: f337f7b0-6865-4401-aaeb-5b676d5b4706
          stepCounter: 7ce2e228-e8bb-449a-ab1e-3ed108ed4320
        config: {}
        dataType: VARCHAR(50)
        description: This is the product key
        hashDetails: null
        name: PRODKEY
        nullable: true
        sourceColumnReferences:
          - columnReferences:
              - columnCounter: 7c9f7041-8ce7-4649-819f-e55a18e36b8e
                stepCounter: 7d8b84ba-e9c2-45ce-955a-3f51df08c001
            transform: ""
      - appliedColumnTests: {}
        columnReference:
          columnCounter: b3c3265a-7203-4de6-a95e-ea1ec403361a
          stepCounter: 7ce2e228-e8bb-449a-ab1e-3ed108ed4320
        config: {}
        dataType: DATE
        description: ""
        hashDetails: null
        name: PC_DT
        nullable: true
        sourceColumnReferences:
          - columnReferences:
              - columnCounter: ad454901-83a3-46f9-8e18-c781187bee43
                stepCounter: 7d8b84ba-e9c2-45ce-955a-3f51df08c001
            transform: |-
              CASE WHEN DS_PRICE_COST.PC_DT = MIN(DS_PRICE_COST.PC_DT) OVER (PARTITION BY DIM_ZONE.ZONE_GEOGRAPHY, DS_PRICE_COST.PRODKEY ORDER BY DS_PRICE_COST.PC_DT) 
                  THEN TO_DATE('2000-01-01') 
              ELSE DS_PRICE_COST.PC_DT 
              END
      - appliedColumnTests: {}
        columnReference:
          columnCounter: 39a2716f-285b-4d4f-bbfc-2dcc68f2c0f6
          stepCounter: 7ce2e228-e8bb-449a-ab1e-3ed108ed4320
        config: {}
        dataType: NUMBER(9,2)
        description: ""
        hashDetails: null
        name: PRICE
        nullable: true
        sourceColumnReferences:
          - columnReferences:
              - columnCounter: caf80271-9275-4e9a-a52c-733a20787f47
                stepCounter: 7d8b84ba-e9c2-45ce-955a-3f51df08c001
            transform: NVL("DS_PRICE_COST"."PRICE",0)
      - acceptedValues:
          strictMatch: true
          values: []
        appliedColumnTests: {}
        columnReference:
          columnCounter: c68e3611-cb01-4ded-bc0f-39246c94a6bd
          stepCounter: 7ce2e228-e8bb-449a-ab1e-3ed108ed4320
        config: {}
        dataType: NUMBER(9,2)
        defaultValue: ""
        description: ""
        name: PRIOR_PRICE
        nullable: false
        sourceColumnReferences:
          - columnReferences:
              - columnCounter: caf80271-9275-4e9a-a52c-733a20787f47
                stepCounter: 7d8b84ba-e9c2-45ce-955a-3f51df08c001
            transform: "LAG(NVL(DS_PRICE_COST.price, 0), 1, 0) OVER (PARTITION BY DIM_ZONE.ZONE_GEOGRAPHY, DS_PRICE_COST.prodkey ORDER BY DS_PRICE_COST.pc_dt) "
        transform: ""
    cteString: ""
    enabledColumnTestIDs: []
    sourceMapping:
      - aliases:
          DS_PRICE_COST: 7d8b84ba-e9c2-45ce-955a-3f51df08c001
        customSQL:
          customSQL: |-
            {{ stage('Override Create SQL') }}
            	CREATE OR REPLACE VIEW {{ this }} AS (
              SELECT 	
                  ZONE_GEOGRAPHY
                , PRODKEY
                , PC_DT	
                , LEAD(PC_DT_END, 1,TO_DATE('2100-01-01')) OVER (PARTITION BY ZONE_GEOGRAPHY, PRODKEY ORDER BY PC_DT) -1 PC_DT_END
                , PRICE
                , PRIOR_PRICE
                , CASE WHEN PRIOR_PRICE > 0 THEN 100 * (1 - (DIV0(PRICE, PRIOR_PRICE))) ELSE 0 END DISCOUNT_PERCENT 
                , CASE WHEN PRICE < PRIOR_PRICE THEN 'Y' ELSE 'N' END PRICE_DROP_FLAG
              FROM (	
                  SELECT 
                      DIM_ZONE.ZONE_GEOGRAPHY
                    , DS_PRICE_COST.prodkey	
                    , CASE WHEN DS_PRICE_COST.pc_dt = MIN(DS_PRICE_COST.pc_dt) OVER (PARTITION BY DIM_ZONE.ZONE_GEOGRAPHY, DS_PRICE_COST.prodkey ORDER BY DS_PRICE_COST.pc_dt) 
                          THEN TO_DATE('2000-01-01') 
                      ELSE DS_PRICE_COST.PC_DT 
                      END pc_dt	
                    , DS_PRICE_COST.pc_dt pc_dt_end	
                    , NVL(DS_PRICE_COST.price, 0) price	
                    , LAG(NVL(DS_PRICE_COST.price, 0), 1, 0) OVER (PARTITION BY DIM_ZONE.ZONE_GEOGRAPHY, DS_PRICE_COST.prodkey ORDER BY DS_PRICE_COST.pc_dt) prior_price
                  
              ) PC
            )
        dependencies:
          - locationName: DATA
            nodeName: DIM_ZONE
          - locationName: DATASTORE
            nodeName: DS_PRICE_COST
        join:
          joinCondition: |-
            FROM {{ref('DATASTORE','DS_PRICE_COST')}} DS_PRICE_COST
            JOIN (SELECT ZONE_GEOGRAPHY, MIN(ZONE_CODE) ZONE_CODE FROM {{ref('DATA','DIM_ZONE')}} GROUP BY ZONE_GEOGRAPHY) DIM_ZONE 
            ON DS_PRICE_COST.ZONE_CODE = DIM_ZONE.ZONE_CODE
            QUALIFY 	
                LAG(NVL(DS_PRICE_COST.price, 0), 1, 0) OVER (PARTITION BY DIM_ZONE.ZONE_GEOGRAPHY, DS_PRICE_COST.prodkey ORDER BY DS_PRICE_COST.pc_dt) <> NVL(DS_PRICE_COST.price,0)	
            AND LAG(NVL(DS_PRICE_COST.price, 0), 1, 0) OVER (PARTITION BY DIM_ZONE.ZONE_GEOGRAPHY, DS_PRICE_COST.prodkey ORDER BY DS_PRICE_COST.pc_dt) > 0
        name: STG_PRICE_PERIOD
        noLinkRefs: []
  name: STG_PRICE_PERIOD
  overrideSQL: false
  schema: ""
  sqlType: Stage
  type: sql
  version: 1
type: Node
