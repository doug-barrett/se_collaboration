fileVersion: 1
id: "1"
macroString: |-
  {#-- ************************************************************************************************* #}
  {#-- Utility Macros #}
  {#-- ************************************************************************************************* #}

  {#-- group_by #}
  {#-- Eg {{ group_by(10) }} #}

  {%- macro group_by(n) -%}
      GROUP BY 
      {%- for n in range(n) %} {{n + 1}}{%- if not loop.last %}, {% endif -%}
      {% endfor -%}
  {%- endmacro %}

  {#-- even_odd #}
  {#-- Eg {{ even_odd("C_CUSTKEY") }} #}

  {%- macro even_odd(column) -%}
      CASE WHEN MOD({{ column }}, 2) = 0 THEN 'EVEN' ELSE 'ODD' END
  {%- endmacro %}

  {#-- date_sk #}
  {#-- Eg {{ date_sk("O_ORDERDATE") }} #}

  {%- macro date_sk(column) -%}
      TO_NUMBER(TO_CHAR({{ column }}, 'YYYYMMDD'))
  {%- endmacro %}


  {#-- ************************************************************************************************* #}
  {#-- Testing templates #}
  {#-- ************************************************************************************************* #}


  {#-- Uniqueness #}
  {#-- Eg {{ test_uniqueness(["L_ORDERKEY","L_LINENUMBER"])}} #}

  {%- macro test_uniqueness(columns=[]) -%}
      select 1 
      from {{this}} 
      group by 
          {% for col in columns %}{{col}}{% if not loop.last %},{% endif %}{% endfor %}
      having count(1) > 1
  {%- endmacro %}


  {#-- Contains #}
  {#-- Eg {{ test_contains( "O_COMMENT", "TESTING") }}  #}

  {%- macro test_contains(column, text) -%}
      select 1 
      from {{this}} 
      where upper({{column}}) like '%' || upper('{{text}}') || '%'
  {%- endmacro %}

  {#-- Range #}

  {%- macro test_range(column, lower, upper) -%}
      select 1 
      from {{this}} 
      where not {{column}} between {{lower}} and {{upper}}
  {%- endmacro %}

  {#-- Rowcount #}
  {#-- Eg {{ test_rowcount( "FROM {{ref('SRC_SAMPLE','LINEITEM')}}") }} #}

  {%- macro test_rowcount(sql_from) -%}
      select 1
      from (select count(*) rc from {{this}} ) this
      where rc <> (select nvl(count(*),0) {{sql_from}} )
  {%- endmacro %}

  {#-- Ref Integrity #}
  {#-- Eg {{ test_ref_integrity("O_CUSTKEY", "C_CUSTKEY","{{ref('DWH','DIM_CUSTOMER')}}") }} #}

  {%- macro test_ref_integrity(column, ref_table_col, ref_table) -%}
      select 1
      from {{this}} 
      where {{column}} not in (select distinct {{ref_table_col}} from {{ref_table}} )
  {%- endmacro %}

  {#-- Missing days range #}
  {#-- Eg {{ test_missing_dates("O_ORDERDATE", "1995-01-01", "1996-01-01") }} #}

  {%- macro test_missing_dates(date_column, from, to) -%}
      select dr.dt
      from (
          select '{{from}}'::date - 1 + row_number() over(order by 0) dt from table(generator(rowcount => 10000)) qualify dt <= '{{to}}') dr
      left join 
          (select {{date_column}}::date dt, count(*) cnt 
           from {{this}}
           group by 1) tab
      on dr.dt = tab.dt
      where nvl(tab.cnt, 0) = 0
  {%- endmacro %}

  {#-- Missing days range CURRENT_DATE offset #}
  {#-- Eg {{ test_missing_date_offset("O_ORDERDATE", 100, 1) }} #}

  {%- macro test_missing_date_offset(date_column, from, to) -%}
      select dr.dt
      from (
          select CURRENT_DATE - {{from}} + row_number() over(order by 0) dt from table(generator(rowcount => 10000)) qualify dt <= CURRENT_DATE - {{to}}
      ) dr
      left join (
          select {{date_column}}::date dt, count(*) cnt 
          from {{this}}
          group by 1
      ) tab
      on dr.dt = tab.dt
      where nvl(tab.cnt, 0) = 0
  {%- endmacro %}


  {#-- ************************************************************************************************* #}
  {#-- Metadata Macros #}
  {#-- ************************************************************************************************* #}

  {#-- replacer #}
  {#-- used for column renames eg {{ replacer(column.name) }} #}
  {#-- Eg {{ date_sk("O_ORDERDATE") }} #}

  {%- macro replacer(column) -%}
      {% set ns = namespace(col=column) %}
      {% for p in parameters.replace %}
          {% set ns.col = ns.col | replace(p.long,  p.short) %}
      {% endfor %}
      {{ ns.col }}
  {%- endmacro %}


  {%- macro ref_raw(location_name, node_name) -%}
      {%- raw -%}{{ ref('{% endraw %}{{- location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
  {%- endmacro -%}


  {%- macro ref_no_link_raw(location_name, node_name) -%}
      {% raw %}{{ ref_no_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
  {%- endmacro -%}



  {#-- This macro will split the join clause into from and rest of the clauses like where,groupby,orderby ,qualify  #}
  {#-- Input parmeters   - joinclause #}
  {#-- Return            - from clause and other clauses #}


  {%- macro get_clause_dbx( joinclause , ret_clause ) -%}

     {% set join_clause = joinclause %}
     {% set has_where_clause = 'where'in join_clause %}
     {% set has_WHERE_clause = 'WHERE'in join_clause %}
     {% set has_order_clause = 'order by'in join_clause %}
     {% set has_ORDER_clause = 'ORDER BY'in join_clause %}
     {% set has_group_clause =  'group by'in join_clause %}
     {% set has_GROUP_clause = 'GROUP BY'in join_clause %}
     {% set has_qualify_clause =  'qualify'in join_clause %}
     {% set has_QUALIFY_clause = 'QUALIFY'in join_clause %}
     {% set clause='default' %}

     {% if has_where_clause %}
        {% set keyword='where'%} 
        {% set clause='where_clause' %}
     {% elif  has_WHERE_clause %}
        {% set keyword='WHERE'%}
        {% set clause='where_clause' %}
     {% endif %}

     {% if has_group_clause and clause != 'where_clause'  %}
        {% set keyword='group by'%}
        {% set clause='group_clause' %}
     {% elif  has_GROUP_clause and clause != 'where_clause' %}
        {% set keyword='GROUP BY'%}
        {% set clause='group_clause' %}
     {% endif %}

     {% if has_qualify_clause and clause != 'where_clause' and clause != 'group_clause'  %}
        {% set keyword='qualify'%}
        {% set clause='qualify_clause' %}
     {% elif  has_QUALIFY_clause and clause != 'where_clause' and clause != 'group_clause'  %}
        {% set keyword='QUALIFY'%}
        {% set clause='qualify_clause' %}
     {% endif %}            

     {% if has_order_clause and  clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}
        {% set keyword='order by'%}
        {% set clause='order_clause' %}
     {% elif has_ORDER_clause and clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}
        {% set keyword='ORDER BY'%}
        {% set clause='order_clause' %}
     {% endif %}

     {% if clause == 'where_clause' %}
        {% set parts = join_clause.split(keyword) %}
        {% set from_clause = parts[0] %}
        {% set add_clause = 'WHERE' + join_clause.split(keyword)[1] %}
     {% elif clause == 'group_clause' %}
        {% set parts = join_clause.split(keyword) %}
        {% set from_clause = parts[0] %}
        {% set add_clause = 'group by' + join_clause.split(keyword)[1] %}
     {% elif clause == 'qualify_clause' %}
        {% set parts = join_clause.split(keyword) %}
        {% set from_clause = parts[0] %}
        {% set add_clause = 'qualify' + join_clause.split(keyword)[1] %}
     {% elif clause == 'order_clause' %}
        {% set parts = join_clause.split(keyword) %}
        {% set from_clause = parts[0] %}
        {% set add_clause =  'order by' + join_clause.split(keyword)[1] %}
     {% else %}
        {% set from_clause = join_clause %}
        {% set add_clause = '' %}
     {% endif %}
     
     {% if ret_clause == 'from' %}
        {{ from_clause | replace('"', '`')}}
     {% else %}
        {{ add_clause | replace('"', '`')}}
     {% endif %}
     
  {%- endmacro -%}


  {#-- This macro will use back ticks for column references - and replace errant double quotes around columns #}
  {#-- Input parmeters   - column #}
  {#-- Return            - DBx compatible column references #}

  {%- macro get_source_transform_dbx(col) -%}
     {% if col.hashDetails %}
        {{ hash(col.hashDetails.columns, algo=col.hashDetails.algorithm, datatype=col.dataType) | replace('"', '`') | replace('VARCHAR)', 'STRING)')}}
     {% elif col.transform | trim != '' %}
        {{ col.transform | replace('"', '`')}}
     {% elif col.sourceColumns[0].node and col.sourceColumns[0].node.name and col.sourceColumns[0].column and col.sourceColumns[0].column.name %}
        `{{ col.sourceColumns[0].node.name }}`.`{{ col.sourceColumns[0].column.name }}`
     {% else %}
        NULL
     {% endif %}
  {% endmacro -%}

  {#-- This macro will use back ticks for column references - and replace errant double quotes around columns #}
  {#-- Input parmeters   - column #}
  {#-- Return            - DBx compatible column references #}

  {%- macro get_source_transform(col) -%}
     {% if col.hashDetails %}
        {{ hash(col.hashDetails.columns, algo=col.hashDetails.algorithm, datatype=col.dataType) | replace('"', '`') | replace('VARCHAR)', 'STRING)')}}
     {% elif col.transform | trim != '' %}
        {{ col.transform | replace('"', '`')}}
     {% elif col.sourceColumns[0].node and col.sourceColumns[0].node.name and col.sourceColumns[0].column and col.sourceColumns[0].column.name %}
        `{{ col.sourceColumns[0].node.name }}`.`{{ col.sourceColumns[0].column.name }}`
     {% else %}
        NULL
     {% endif %}
  {% endmacro -%}
name: macro
type: Macro
